<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flask+Celery</title>
    <url>/2023/05/27/Flask+Celery/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用自己之前写的那个pdscan的时候，感觉到略有不适，时不时会出现比较诡异的bug，同时也缺少一堆自己想要的功能，于是考虑花几天修一修bug，加一点功能</p>
<p>当时写pdscan的时候没学过什么叫消息任务队列，也懒得搞，所以就自己用<code>@app.before_first_request</code>和多线程弄了个后台任务，现在来看有点简陋了</p>
<p>打算这次加功能的时候，顺道把自己写的这东西换掉，别放在github上丢人了</p>
<h2 id="什么是celery"><a href="#什么是celery" class="headerlink" title="什么是celery"></a>什么是celery</h2><p>Celery是一个基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理</p>
<p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）</p>
<p>具体来说，就是当程序产生异步任务需求时，通过Celery将异步任务发送至broker暂存，同时worker从broker中领取属于自己的任务并进行处理和结果存储，从而避免时间过长的异步任务对主任务产生影响</p>
<p>用于暂存任务队列的broker可以使RabbitMQ，也可以是redis</p>
<p><img src="http://pic.rayi.sdpcsec.cn/SouthEast.png" alt="这里写图片描述"></p>
<h3 id="安装和示例"><a href="#安装和示例" class="headerlink" title="安装和示例"></a>安装和示例</h3><p>Redis安装略</p>
<p>安装Celery和Redis：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install celery redis</span><br></pre></td></tr></table></figure>

<p>启动redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>



<p>以下是一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Celery 实例</span></span><br><span class="line">app = Celery(<span class="string">&#x27;testTask&#x27;</span>, broker=<span class="string">&#x27;redis://localhost:6379/0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_task1</span>():</span><br><span class="line">    <span class="comment"># 生成任务md5</span></span><br><span class="line">    task_id = md5(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建task_id为名称的文件，内容为当前时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务1:<span class="subst">&#123;task_id&#125;</span> 执行于:&#x27;</span>, datetime.now())</span><br><span class="line">    time.sleep(<span class="number">7</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务1:<span class="subst">&#123;task_id&#125;</span> 结束于:&#x27;</span>, datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_task2</span>():</span><br><span class="line">    <span class="comment"># 生成任务md5</span></span><br><span class="line">    task_id = md5(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在此处定义你的任务逻辑</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务2:<span class="subst">&#123;task_id&#125;</span> 执行于:&#x27;</span>, datetime.now())</span><br><span class="line">    time.sleep(<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务2:<span class="subst">&#123;task_id&#125;</span> 结束于:&#x27;</span>, datetime.now())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动Celery worker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m celery -A test worker --loglevel=info</span><br></pre></td></tr></table></figure>

<p>这将启动Celery worker，使其准备好接收和执行任务。</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230522195950762.png" alt="image-20230522195950762"></p>
<p>向broker添加任务，可以看到直接就返回了结果，没有等待sleep和输出</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230522200726716.png" alt="image-20230522200726716"></p>
<p>在看celery的页面</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230522200822739.png" alt="image-20230522200822739"></p>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>Celery 可以跟踪任务当前的状态信息。状态信息包含成功任务的结果，或执行失败任务的异常信息。</p>
<p>在任务的执行周期中，可能会有几种状态的变换，每次变换都会附加当前状态信息。当任务进入下一个状态时，上一个状态的信息会被移除，但可以进行推断任务的状态信息（例如，一个任务处于执行 <code>FAILED</code> 状态，则表示在某个时刻是处于 <code>STARTED</code> 状态的）。</p>
<p>如果需要跟踪任务信息、状态或返回值，需要提供一个 Celery 存储的结果后端，便于检索。有几个内置的结果后端可以考虑使用：SQLAlchemy&#x2F;Django ORM、Memcached、RabbitMQ&#x2F;QPid(rpc) 和 Redis，也可以自定义后端。</p>
<h4 id="内置状态"><a href="#内置状态" class="headerlink" title="内置状态"></a>内置状态</h4><ul>
<li><p>PENDING</p>
<ul>
<li>任务正在等待执行或未知。任何未知的任务 ID 都默认处于挂起状态。</li>
</ul>
</li>
<li><p>STARTED</p>
<ul>
<li>任务已经开始。默认情况下不会记录，需要启用，请参阅 <code>app.Task.track_started.</code>。</li>
<li>meta-data：正在执行任务的职程（Worker） pid 和主机名。</li>
</ul>
</li>
<li><p>SUCCESS</p>
<ul>
<li>任务执行成功。</li>
<li>meta-data：任务结果返回值 propagates：Yes ready: Yes</li>
</ul>
</li>
<li><p>FAILURE</p>
<ul>
<li>任务执行失败。</li>
<li>meta-data：执行异常时的任务信息，其中 traceback 包含引发错误的堆栈信息。 propagates：Yes</li>
</ul>
</li>
<li><p>RETRY</p>
<ul>
<li>任务处于重试状态。</li>
<li>meta-data：结果信息包含导致重试的异常信息，traceback 包含引发异常时堆栈的回溯。 propagates：No</li>
</ul>
</li>
<li><p>REVOKED</p>
<ul>
<li>任务被撤销。</li>
<li>propagates：Yes</li>
</ul>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>还是用上面的那个源码，但是在创建celery实例时，要开启存储结果后端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 Celery 实例</span></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;redis://localhost:6379/0&#x27;</span>, backend=<span class="string">&#x27;redis://localhost:6379/1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用delay()方法会返回任务对象，调用任务对象的<code>.state</code>属性即可看到当前任务的任务状态</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230522202227723.png" alt="image-20230522202227723"></p>
<h3 id="状态控制"><a href="#状态控制" class="headerlink" title="状态控制"></a>状态控制</h3><p>终止未开始的特定任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line">AsyncResult(c.task_id).revoke()</span><br></pre></td></tr></table></figure>

<p>终止已经开始的任务，但不会结束其启动的进程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line">AsyncResult(c.task_id).revoke(terminate=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_task1</span>():</span><br><span class="line">    <span class="comment"># 生成任务md5</span></span><br><span class="line">    task_id = md5(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建task_id为名称的文件，内容为当前时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务1:<span class="subst">&#123;task_id&#125;</span>执行于:&#x27;</span>, datetime.now())</span><br><span class="line">    os.system(<span class="string">&quot;sleep 10&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务1:<span class="subst">&#123;task_id&#125;</span>结束于:&#x27;</span>, datetime.now())</span><br></pre></td></tr></table></figure>

<p>终止指令下达后，还是能看到sleep的进程</p>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p><code>celery beat</code> 是一个调度程序；它定期启动任务，然后由集群中的可用节点执行任务。</p>
<p>默认情况下会从配置中的 <code>beat_schedule</code> 项中获取条目(entries)，但是也可以使用自定义存储，例如将<strong>entries</strong>存储在SQL数据库中。</p>
<p>应确保一次只运行一个调度程序来执行一个调度程序，否则最终将导致重复的任务。使用集中式方法意味着时间表不必同步，并且该服务可以在不使用锁的情况下运行。</p>
<p>在pdscan中，需要使用定时任务来检查是否有新扫描任务下达，例如，每10秒检查一次数据库中是否存在waiting的任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Celery 实例</span></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;redis://localhost:6379/0&#x27;</span>, backend=<span class="string">&#x27;redis://localhost:6379/1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_task1</span>():</span><br><span class="line">    <span class="comment"># 生成任务md5</span></span><br><span class="line">    task_id = md5(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建task_id为名称的文件，内容为当前时间</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务1:<span class="subst">&#123;task_id&#125;</span>执行于:&#x27;</span>, datetime.now())</span><br><span class="line">    time.sleep(<span class="number">7</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务1:<span class="subst">&#123;task_id&#125;</span>结束于:&#x27;</span>, datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_task2</span>():</span><br><span class="line">    <span class="comment"># 生成任务md5</span></span><br><span class="line">    task_id = md5(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在此处定义你的任务逻辑</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务2:<span class="subst">&#123;task_id&#125;</span>执行于:&#x27;</span>, datetime.now())</span><br><span class="line">    time.sleep(<span class="number">9</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;定时任务2:<span class="subst">&#123;task_id&#125;</span>结束于:&#x27;</span>, datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义定时任务</span></span><br><span class="line"><span class="meta">@app.on_after_configure.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_periodic_tasks</span>(<span class="params">sender, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 每隔 5 秒执行一次任务</span></span><br><span class="line">    sender.add_periodic_task(<span class="number">5.0</span>, my_task1.s(), name=<span class="string">&#x27;任务1&#x27;</span>)</span><br><span class="line">    <span class="comment"># 每隔 5 秒执行一次任务</span></span><br><span class="line">    sender.add_periodic_task(<span class="number">5.0</span>, my_task2.s(), name=<span class="string">&#x27;任务2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Celery 定时任务</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>VMware-12代CPU卡顿解决办法</title>
    <url>/2023/05/28/VMware-12%E4%BB%A3CPU%E5%8D%A1%E9%A1%BF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>自从换了新电脑，虚拟机就一直卡的不行，哪怕就用win7开个文件管理器也能卡个半年</p>
<p>改了硬件配置，8核8G的win7照卡不误，侧通道缓解根本没开</p>
<p>不只是Windows，kali、ubuntu啥的也卡，还以为买到了假电脑</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在百思不得其解之时，看到了雨苁大佬的博客：</p>
<p><a href="https://www.ddosi.org/vmware17/">VMware workstation 16 &amp; 17 12代CPU卡顿解决办法 - 🔰雨苁ℒ🔰 (ddosi.org)</a></p>
<blockquote>
<p>最终的解决办法如下:</p>
<p>关闭或挂起所有虚拟机,找到VMware安装目录,vmware.exe右键–属性–兼容性–勾选”以管理员身份运行此程序“[应用-确定]</p>
<p><img src="http://pic.rayi.sdpcsec.cn/21133935.webp" alt="这里写图片描述"></p>
<p><img src="http://pic.rayi.sdpcsec.cn/21134026.webp"></p>
<p>再次打开虚拟机就不会卡顿了.</p>
</blockquote>
<p>试了试，确实好使，瞬间丝滑了，大佬牛逼</p>
]]></content>
      <categories>
        <category>折腾环境</category>
      </categories>
  </entry>
  <entry>
    <title>利用SSH隧道建立端口转发或Socks代理</title>
    <url>/2023/06/18/%E5%88%A9%E7%94%A8SSH%E9%9A%A7%E9%81%93%E5%BB%BA%E7%AB%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%88%96Socks%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="利用SSH隧道建立端口转发或Socks代理"><a href="#利用SSH隧道建立端口转发或Socks代理" class="headerlink" title="利用SSH隧道建立端口转发或Socks代理"></a>利用SSH隧道建立端口转发或Socks代理</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在工作过程中，我们通常需要一些工具来帮助我们建立代理隧道，达到隐藏IP地址，或者穿透防火墙的效果。好用的工具有很多，但最常见的应该还是ssh。</p>
<p>ssh自带三种转发功能，分别为动态转发（Socks代理）、本地端口转发、远程端口转发</p>
<h3 id="环境假设"><a href="#环境假设" class="headerlink" title="环境假设"></a>环境假设</h3><p>假设我们有三台主机：</p>
<ul>
<li>Client A：Windows Localhost</li>
<li>Tunnel B：Linux ssh 192.168.1.2:22</li>
<li>Tunnel C：Linux ssh 192.168.1.3:33</li>
</ul>
<p>以下所有示例都按照此环境进行说明，我们本地终端就是Client A</p>
<h3 id="动态转发（socks代理）"><a href="#动态转发（socks代理）" class="headerlink" title="动态转发（socks代理）"></a>动态转发（socks代理）</h3><p>newbing:SSH的动态端口转发（也称为“SOCKS代理”）允许您通过SSH连接将本地计算机上的指定端口配置为SOCKS代理服务器。当您的应用程序连接到该端口时，SSH客户端会创建到远程服务器的加密隧道，并且所有流经该隧道的流量都将被动态转发到目标主机和端口。</p>
<p>动态端口转发的命令格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -Nf -D [bind_address:]port user@remotehost -p 22</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>-D [bind_address:]port</code>：指定要使用的本地IP地址（可选）和要侦听的端口号。</li>
<li><code>-N</code>：告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发。</li>
<li><code>-f</code>：告诉SSH客户端在后台运行。</li>
</ul>
<p><code>bind_address</code>是指定要使用的本地IP地址。它是可选的，如果未指定，通常默认为<code>localhost</code>，但实际默认应根据配置文件中GatewayPorts来。这意味着只有本地计算机上的应用程序才能连接到SOCKS代理服务器。</p>
<p>如果您希望其他计算机也能连接到SOCKS代理服务器，您可以将<code>bind_address</code>设置为您计算机的公共IP地址或<code>0.0.0.0</code>（表示侦听所有网络接口）。</p>
<p>很好理解，就是相当于把远程服务器当做socks服务器，进行代理，以下是一个示例</p>
<p>我们将A与B之间建立动态转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -D 1234 -N -f root@192.168.1.2 -p 22</span><br></pre></td></tr></table></figure>

<p>此时，我们把浏览器挂上代理（socks5:&#x2F;&#x2F;127.0.0.1:1234），最终出网地址为192.168.1.2</p>
<p>在本地终端中运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rayi @ a in ~ [10:47:35] C:255</span></span><br><span class="line">$ ssh -Nf -D localhost:1234 root@47.xxx -p 22</span><br><span class="line">The authenticity of host <span class="string">&#x27;[47.xxx]:22 ([47.xxx]:22)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:xxx.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>[47.xxx]:22<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@47.xxx&#x27;</span>s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">root@47.xxx<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">root@47.xxx&#x27;</span>s password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># rayi @ a in ~ [10:48:14]</span></span><br><span class="line">$ curl cip.cc</span><br><span class="line">IP      : 59.xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># rayi @ a in ~ [10:48:17]</span></span><br><span class="line">$ proxychains curl cip.cc</span><br><span class="line">ProxyChains-3.1 (http://proxychains.sf.net)</span><br><span class="line">|DNS-request| cip.cc</span><br><span class="line">|S-chain|-&lt;&gt;-127.0.0.1:1234-&lt;&gt;&lt;&gt;-4.2.2.2:53-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">|DNS-response| cip.cc is 124.70.129.64</span><br><span class="line">|S-chain|-&lt;&gt;-127.0.0.1:1234-&lt;&gt;&lt;&gt;-124.70.129.64:80-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">IP      : 47.xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3><p>newbing:SSH的本地端口转发允许您通过SSH连接将本地计算机上的指定端口转发到远程服务器上的指定主机和端口。当您的应用程序连接到该端口时，SSH客户端会创建到远程服务器的加密隧道，并且所有流经该隧道的流量都将被转发到目标主机和端口。</p>
<p>本地端口转发的命令格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -Nf -L [bind_address:]port:host:hostport user@remotehost</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>-L [bind_address:]port:host:hostport</code>：指定要使用的本地IP地址（可选）、要侦听的端口号、目标主机和目标端口。</li>
<li><code>-N</code>：告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发。</li>
<li><code>-f</code>：告诉SSH客户端在后台运行。</li>
</ul>
<p>简单来说，若我们的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -Nf -L [bind_address:]HostAPort:HostC:HostCPort user@HostB</span><br></pre></td></tr></table></figure>

<p>那么，该命令就是将对[bind_address:]APort的访问，通过B，转发成对C:CPort的访问</p>
<p>示例，将本地的1234端口与远程的2333端口绑定</p>
<p>在本地终端中运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rayi @ a in ~ [11:02:44] C:1</span></span><br><span class="line">$ ssh -Nf -L 1234:47.xxx:23002 root@47.xxx -p 3389</span><br><span class="line">root@47.xxx<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># rayi @ a in ~ [11:03:28]</span></span><br><span class="line"><span class="string">$ curl 127.0.0.1:1234</span></span><br></pre></td></tr></table></figure>

<p>远程服务器监听，可得到结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root @ VM-4-2-ubuntu in ~ [11:03:37]</span></span><br><span class="line">$ nc -lvp 23002</span><br><span class="line">Listening on 0.0.0.0 23002</span><br><span class="line">Connection received on 47.xxx 46662</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:1234</span><br><span class="line">User-Agent: curl/7.68.0</span><br><span class="line">Accept: */*</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h3><p>newbing：SSH的远程端口转发允许您通过SSH连接将远程服务器上的指定端口转发到本地计算机上的指定主机和端口。当远程服务器上的应用程序连接到该端口时，SSH客户端会创建到本地计算机的加密隧道，并且所有流经该隧道的流量都将被转发到目标主机和端口。</p>
<p>远程端口转发的命令格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -Nf -R [bind_address:]port:host:hostport  user@remotehost</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>-R [bind_address:]port:host:hostport</code>：指定要使用的远程IP地址（可选）、要侦听的端口号、目标主机和目标端口。</li>
<li><code>-N</code>：告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发。</li>
<li><code>-f</code>：告诉SSH客户端在后台运行。</li>
</ul>
<p>这个就跟上面的相反，简单来说，若我们的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -Nf -R [bind_address:]HostBPort:HostC:HostCPort user@HostB</span><br></pre></td></tr></table></figure>

<p>那么，该命令就是将对[bind_address:]BPort的访问，通过A，转发成对C:CPort的访问</p>
<p>示例，在本地终端执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rayi @ a in ~ [11:10:17]</span></span><br><span class="line">$ ssh -Nf -R 1234:127.0.0.1:2333 root@47.xxx -p 3389</span><br><span class="line">root@47.xxx<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># rayi @ a in ~ [11:11:53]</span></span><br><span class="line"><span class="string">$ nc -lvp 2333</span></span><br><span class="line"><span class="string">Listening on 0.0.0.0 2333</span></span><br><span class="line"><span class="string">Connection received on localhost 13190</span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:1234</span></span><br><span class="line"><span class="string">User-Agent: curl/7.81.0</span></span><br><span class="line"><span class="string">Accept: */*</span></span><br></pre></td></tr></table></figure>

<p>远程服务器执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root @ VM-4-2-ubuntu in ~ [11:05:28] C:130</span></span><br><span class="line">$ curl http://127.0.0.1:1234</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="双层-x2F-多层代理隧道"><a href="#双层-x2F-多层代理隧道" class="headerlink" title="双层&#x2F;多层代理隧道"></a>双层&#x2F;多层代理隧道</h3><p>利用ssh端口转发功能建立起双层代理隧道，即本机链接A，A转发给B，B访问真正的服务器</p>
<p>您可以使用SSH的端口转发功能来建立双层代理隧道。利用ssh构建多级跳板，就是先用本地转发将远端机器的ssh端口与本地端口做映射，然后再通过本地端口继续与其他远端机器的ssh端口构建映射，直至最后一跳时采用任意动态端口转发（建立socks服务器）。 最后本地使用socks代理工具进行配置，就可以根据需要让应用按照之前构建的隧道进行通信。¹</p>
<p>例如，如果您有两级跳板，系统为linux，实验环境为：</p>
<ul>
<li>Client A：Windows Localhost</li>
<li>Tunnel B：Linux ssh 192.168.1.39:22</li>
<li>Tunnel C：Linux ssh 192.168.1.42:55</li>
</ul>
<p>那么第一层转发为： A (localhost:12345)-&gt;B (192.168.1.39:22)-&gt;C (192.168.1.42:55)。¹</p>
<p>您可以参考这个例子来设置您自己的双层代理隧道。</p>
<p>根据您之前提到的例子，您可以按照以下步骤进行操作：</p>
<ol>
<li><p>在Client A上执行第一层转发命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -Nf -C -L 12345:192.168.1.42:55 rootB@192.168.1.39 -p 22</span><br></pre></td></tr></table></figure>
<p>这一步是做了本地12345端口到远程C的55端口映射，A与B之间的通信是SSH加密通信。</p>
</li>
<li><p>在Client A上执行第二层转发命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -Nf -C -D localhost:9833 rootC@localhost -p 12345</span><br></pre></td></tr></table></figure>
<p>这一步只绑定本地端口（9833），虽然是与本地的12345通信，但实质是通过tunnel1与C建立了动态转发关系。此时C充当Socks代理服务器的角色。</p>
</li>
</ol>
<p>希望这些信息对您有所帮助。</p>
<p>这些命令中的参数分别表示以下含义：</p>
<ul>
<li><code>-N</code>：告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发。</li>
<li><code>-f</code>：告诉SSH客户端在后台运行。</li>
<li><code>-C</code>：启用压缩数据传输。</li>
<li><code>-L</code>：指定本地端口转发。格式为<code>[bind_address:]port:host:hostport</code>，表示将本地的<code>port</code>端口与远程的<code>host:hostport</code>建立映射关系。</li>
<li><code>-D [bind_address:]port</code>：指定动态应用程序级别的端口转发。格式为<code>[bind_address:]port</code>，表示在本地机器上分配了一个端口进行侦听，一旦该端口有了连接，转发出去的数据由发起的请求来决定交给远端机器的哪个端口。</li>
</ul>
<p>希望这些信息对您有所帮助。</p>
<p>源: 与必应的对话， 2023&#x2F;6&#x2F;18<br>(1) 利用SSH隧道构建多级Tunnel - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/94624842">https://zhuanlan.zhihu.com/p/94624842</a>.<br>(2) 彻底搞懂SSH端口转发命令 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/148825449">https://zhuanlan.zhihu.com/p/148825449</a>.<br>(3) 使用SSH协议搭建隧道（附搭建环境超详细） - CSDN博客. <a href="https://blog.csdn.net/qq_45300786/article/details/111025981">https://blog.csdn.net/qq_45300786/article/details/111025981</a>.</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>远程服务器抓包方法</title>
    <url>/2023/05/21/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="远程抓包方法"><a href="#远程抓包方法" class="headerlink" title="远程抓包方法"></a>远程抓包方法</h2><p>在实际环境中，可能会遇到部分目标机器存在性能差，存储空间小等情况，导致无法长时间在目标机抓流量并存储数据包</p>
<p>此时我们可以尝试利用目标机工具，对其进行远程抓包，从而避免将数据包存储在目标机上</p>
<h3 id="Tcpdump-ssh-wireshark"><a href="#Tcpdump-ssh-wireshark" class="headerlink" title="Tcpdump+ssh+wireshark"></a>Tcpdump+ssh+wireshark</h3><p><a href="https://blog.csdn.net/koalazoo/article/details/84958752">(50条消息) 用wireshark+tcpdump+ssh远程抓包并实时显示_tcpdump 抓包实时转发_转转耳朵的博客-CSDN博客</a></p>
<p>利用ssh登录远程主机，然后命令tcpdump开启抓包，并将tcpdump抓到的结果输出到stdout，再传回本地PC机，而本地PC机上的wireshark以stdin为输入，两者以管道连接传输</p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@some.host <span class="string">&#x27;tcpdump -i eth0 port not 22 -s 0 -l -w -&#x27;</span> | wireshark -k -i -</span><br></pre></td></tr></table></figure>

<p>命令执行后会弹出wireshark界面，这时需要切回刚刚的命令行，因为需要输入密码以登录远程主机（已经配置免密另说），连接成功后即开始抓包，并在本地PC的wireshark上实时显示抓包结果。</p>
<blockquote>
<p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p>
<p>由于是通过ssh隧道和远程主机进行的链接，链接中的通讯也会被抓取，从而导致数据包大小不断成倍增长</p>
<p>可尝试不抓ssh端口的数据包，或者只抓内网通讯网卡的数据包</p>
</blockquote>
<h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><p>tcpdump中 <code>-l</code> （这里是小写的字母L）是指line-buffer，即不使用缓存，直接输出，否则就会一段段的输出</p>
<p><code>-w -</code>是指写文件，目标文件为标准输出。</p>
<p>wireshark中 <code>-k</code> 是指马上开始捕获数据，<code>-i -</code> 是指从指定接口获取，源为标准输入。</p>
<h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><p><img src="http://pic.rayi.sdpcsec.cn/image-20230520191907142.png" alt="image-20230520191907142"></p>
<h3 id="Tcpdump-nc-wireshark"><a href="#Tcpdump-nc-wireshark" class="headerlink" title="Tcpdump+nc+wireshark"></a>Tcpdump+nc+wireshark</h3><p>如果某些机器上没有ssh（例如某些路由器只有Telnet，或者只有webshell），则可以使用nc进行数据传输</p>
<blockquote>
<p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p>
<p>同样，要避免抓取通讯端口的数据包</p>
</blockquote>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230520193304708.png" alt="image-20230520193304708"></p>
<h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><p>目标机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 port not 2333 -s 0 -l -w - | nc 192.168.2.111 2333</span><br></pre></td></tr></table></figure>

<p>操作机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 2333 | wireshark -k -i -</span><br></pre></td></tr></table></figure>

<p><img src="http://pic.rayi.sdpcsec.cn/image-20230520193735800.png" alt="image-20230520193735800"></p>
<h3 id="Tcpdump-nc-nohup-wireshark"><a href="#Tcpdump-nc-nohup-wireshark" class="headerlink" title="Tcpdump+nc+nohup+wireshark"></a>Tcpdump+nc+nohup+wireshark</h3><p>直接挂在后台进行抓包，注意nohup会在管道符之前截断，需要用<code>sh -c</code> 将管道符包含起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> sh -c <span class="string">&#x27;tcpdump -i eth0 port not 2333 -s 0 -l -w - | nc 192.168.2.111 2333&#x27;</span> &amp;</span><br></pre></td></tr></table></figure>

<p><img src="http://pic.rayi.sdpcsec.cn/image-20230520194915007.png" alt="image-20230520194915007"></p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
  </entry>
  <entry>
    <title>在非目标机器上制作相同内核版本Profile文件</title>
    <url>/2023/06/26/%E5%9C%A8%E9%9D%9E%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8%E4%B8%8A%E5%88%B6%E4%BD%9C%E7%9B%B8%E5%90%8C%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%ACProfile%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="在非目标机器上制作相同内核版本Profile文件"><a href="#在非目标机器上制作相同内核版本Profile文件" class="headerlink" title="在非目标机器上制作相同内核版本Profile文件"></a>在非目标机器上制作相同内核版本Profile文件</h1><p>在使用volatility2进行内存取证的时候，需要制作相对应系统的profile文件，才能正常提取镜像中的信息。</p>
<p>但正常取证流程下，可能会遇到无法在目标机器上安装制作profile所用依赖的情况</p>
<p>目前来看，如果<strong>不想或无法在目标机器上安装或编译其他程序</strong>的话，制作系统符号表需要知道当前系统的<strong>发行版本及内核版本</strong>，然后搭建<strong>指定版本的虚拟机</strong>，提取其符号表信息</p>
<h2 id="Volatility2"><a href="#Volatility2" class="headerlink" title="Volatility2"></a>Volatility2</h2><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><h4 id="大致版本CentOS安装"><a href="#大致版本CentOS安装" class="headerlink" title="大致版本CentOS安装"></a>大致版本CentOS安装</h4><p>查看系统及内核版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@instance-xxxxx linux]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-957.12.1.el7.x86_64</span><br><span class="line">[root@instance-xxxxx kernels]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>

<p>下载指定版本的系统iso文件</p>
<p><a href="https://mirrors.aliyun.com/centos-vault/7.6.1810/isos/x86_64/">centos-vault-7.6.1810-isos-x86_64安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p>
<p>下载最普遍的dvd版本，VMware自动化快速安装（mini?）</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230624235642610.png" alt="image-20230624235642610"></p>
<p>此时的内核大版本应该是相同的，但是可能存在小版本差异</p>
<h4 id="修整内核小版本差异"><a href="#修整内核小版本差异" class="headerlink" title="修整内核小版本差异"></a>修整内核小版本差异</h4><p>例如，某台Linux主机内核版本为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.10.0-957.12.1.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>可以发现，我们从镜像安装的内核是没有后面的小版本的，那小版本号差异在哪些地方呢？</p>
<blockquote>
<p>centos7中，3.10.0-957.12.1.el7.x86_64版本的内核和3.10.0-957.el7.x86_64版本的内核有何区别？</p>
<p>内核版本3.10.0-957.12.1.el7.x86_64和3.10.0-957.el7.x86_64之间的主要区别在于它们的版本号。前者是第12个修补程序级别，而后者是第0个修补程序级别。修补程序级别是指内核的特定版本，其中包含了一些错误修复和安全更新。因此，3.10.0-957.12.1.el7.x86_64版本的内核比3.10.0-957.el7.x86_64版本的内核更稳定和更安全 ¹。</p>
<p>希望这可以回答您的问题。如果您有任何其他问题，请告诉我。</p>
<p>源: 与必应的对话， 2023&#x2F;6&#x2F;25<br>(1) centos 各版本发行时间和内核对应列表 - CSDN博客. <a href="https://blog.csdn.net/SHELLCODE_8BIT/article/details/122251707">https://blog.csdn.net/SHELLCODE_8BIT/article/details/122251707</a>.<br>(2) Red Hat Enterprise Linux のカーネルの最新リリースの確認方法. <a href="https://www.redhat.com/ja/blog/what-latest-kernel-release-my-version-red-hat-enterprise-linux">https://www.redhat.com/ja/blog/what-latest-kernel-release-my-version-red-hat-enterprise-linux</a>.<br>(3) centos7 内核 kernel-devel-3.10.0-957.el7.x86_64 - CSDN博客. <a href="https://blog.csdn.net/qq_54947566/article/details/122024506">https://blog.csdn.net/qq_54947566/article/details/122024506</a>.</p>
</blockquote>
<p>我们若想在虚拟机中制作profile，分析目标机器中提取的内存文件，就要做到大小版本完全一致</p>
<p>于是，我们就得手动安装小版本内核</p>
<p>先从centos官网下载对应版本的rpm包</p>
<p><a href="https://buildlogs.centos.org/c7.1810.u.x86_64/kernel/20190429145505/3.10.0-957.12.1.el7.x86_64/">Index of &#x2F;c7.1810.u.x86_64&#x2F;kernel&#x2F;20190429145505&#x2F;3.10.0-957.12.1.el7.x86_64 (centos.org)</a></p>
<p>需要下载的文件如下：</p>
<ul>
<li><code>kernel-3.10.0-957.12.1.el7.x86_64.rpm</code></li>
</ul>
<p>使用<code>yum install kernel-3.10.0-957.12.1.el7.x86_64.rpm</code>安装该个软件包，安装完成后，重启虚拟机，选择新版本内核启动，继续安装环境依赖</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20230625005329852.png" alt="image-20230625005329852"></p>
<p>继续下载，并使用yum安装：</p>
<ul>
<li><code>kernel-headers-3.10.0-957.12.1.el7.x86_64.rpm</code></li>
<li><code>kernel-devel-3.10.0-957.12.1.el7.x86_64.rpm</code></li>
</ul>
<p>若之前已经安装过相关软件包，则需使用<code>yum remove xxx</code>进行删除</p>
<p>安装其他必要依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc elfutils-libelf-devel make git libdwarf-tools python2-devel.x86_64 -y</span><br></pre></td></tr></table></figure>

<p>至此，相同内核版本的虚拟机就制作完成了，从此虚拟机制作的profile文件，可以适用于其他相同内核版本的主机抓取的内存镜像</p>
<h4 id="制作profile"><a href="#制作profile" class="headerlink" title="制作profile"></a>制作profile</h4><p>将<code>volatility2/tools/linux</code>文件夹复制进虚拟机，直接make，获取当前内核版本下的<code>module.dwarf</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost tmp]<span class="comment"># cd linux/</span></span><br><span class="line">[root@localhost linux]<span class="comment"># ls</span></span><br><span class="line">kcore  Makefile  Makefile.enterprise  module.c</span><br><span class="line">[root@localhost linux]<span class="comment"># make</span></span><br><span class="line">make -C //lib/modules/3.10.0-957.el7.x86_64/build CONFIG_DEBUG_INFO=y M=<span class="string">&quot;/tmp/linux&quot;</span> modules</span><br><span class="line">make[1]: Entering directory `/usr/src/kernels/3.10.0-957.el7.x86_64<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  CC [M]  /tmp/linux/module.o</span></span><br><span class="line"><span class="string">  Building modules, stage 2.</span></span><br><span class="line"><span class="string">  MODPOST 1 modules</span></span><br><span class="line"><span class="string">  CC      /tmp/linux/module.mod.o</span></span><br><span class="line"><span class="string">  LD [M]  /tmp/linux/module.ko</span></span><br><span class="line"><span class="string">make[1]: Leaving directory `/usr/src/kernels/3.10.0-957.el7.x86_64&#x27;</span></span><br><span class="line">dwarfdump -di module.ko &gt; module.dwarf</span><br><span class="line">make -C //lib/modules/3.10.0-957.el7.x86_64/build M=<span class="string">&quot;/tmp/linux&quot;</span> clean</span><br><span class="line">make[1]: Entering directory `/usr/src/kernels/3.10.0-957.el7.x86_64<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  CLEAN   /tmp/linux/.tmp_versions</span></span><br><span class="line"><span class="string">  CLEAN   /tmp/linux/Module.symvers</span></span><br><span class="line"><span class="string">make[1]: Leaving directory `/usr/src/kernels/3.10.0-957.el7.x86_64&#x27;</span></span><br><span class="line">[root@localhost linux]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>随后，再从<code>/boot</code>目录获取<code>System.map</code>文件，它包含了所有与当前运行的内核相关的符号</p>
<p>将<code>System.map</code>文件与<code>module.dwarf</code>文件放置同一文件夹下，并使用zip压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost linux]<span class="comment"># ls -la /boot</span></span><br><span class="line">total 128760</span><br><span class="line">dr-xr-xr-x.  5 root root     4096 Jun 24 08:56 .</span><br><span class="line">dr-xr-xr-x. 17 root root      224 Jun 24 08:55 ..</span><br><span class="line">-rw-r--r--.  1 root root   151918 Nov  8  2018 config-3.10.0-957.el7.x86_64</span><br><span class="line">drwx------.  3 root root       17 Nov  8  2018 efi</span><br><span class="line">drwxr-xr-x.  2 root root       27 Jun 24 08:50 grub</span><br><span class="line">drwx------.  5 root root       97 Jun 24 08:55 grub2</span><br><span class="line">-rw-------.  1 root root 74029448 Jun 24 08:54 initramfs-0-rescue-9d498ec355b64c509c250095df7ec6f5.img</span><br><span class="line">-rw-------.  1 root root 29277767 Jun 24 08:55 initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">-rw-------.  1 root root 11226369 Jun 24 08:56 initramfs-3.10.0-957.el7.x86_64kdump.img</span><br><span class="line">-rw-r--r--.  1 root root   314036 Nov  8  2018 symvers-3.10.0-957.el7.x86_64.gz</span><br><span class="line">-rw-------.  1 root root  3543471 Nov  8  2018 System.map-3.10.0-957.el7.x86_64</span><br><span class="line">-rwxr-xr-x.  1 root root  6639904 Jun 24 08:54 vmlinuz-0-rescue-9d498ec355b64c509c250095df7ec6f5</span><br><span class="line">-rwxr-xr-x.  1 root root  6639904 Nov  8  2018 vmlinuz-3.10.0-957.el7.x86_64</span><br><span class="line">-rw-r--r--.  1 root root      166 Nov  8  2018 .vmlinuz-3.10.0-957.el7.x86_64.hmac</span><br><span class="line">[root@localhost linux]<span class="comment"># cp /boot/System.map-3.10.0-957.el7.x86_64 ./</span></span><br><span class="line">[root@localhost linux]<span class="comment"># ls</span></span><br><span class="line">kcore  Makefile  Makefile.enterprise  module.c  module.dwarf  System.map-3.10.0-957.el7.x86_64</span><br><span class="line">[root@localhost linux]<span class="comment"># zip Centos7.6.1810.zip ./module.dwarf System.map-3.10.0-957.el7.x86_64</span></span><br><span class="line">  adding: module.dwarf (deflated 89%)</span><br><span class="line">  adding: System.map-3.10.0-957.el7.x86_64 (deflated 79%)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将zip文件取出，即可获得制作完成的自定义profile文件</p>
<p>将其放置在<code>volatility2/volatility/plugins/overlays/linux</code>目录中，即可使profile文件生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python2 D:\Tools\取证工具\volatility2\vol.py --info | findstr Centos</span><br><span class="line">Volatility Foundation Volatility Framework 2.6.1</span><br><span class="line">LinuxCentos7_6_1810x64                     - A Profile <span class="keyword">for</span> Linux Centos7.6.1810 x64</span><br></pre></td></tr></table></figure>

<p>使用该profile文件分析内存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python2 D:\Tools\取证工具\volatility2\vol.py --profile=LinuxCentos7_6_1810x64 -f .\out2.lime linux_bash</span><br><span class="line">Volatility Foundation Volatility Framework 2.6.1</span><br><span class="line"></span><br><span class="line">Pid      Name                 Command Time                   Command</span><br><span class="line">-------- -------------------- ------------------------------ -------</span><br><span class="line">   17388 bash                 2023-06-24 15:56:19 UTC+0000   <span class="built_in">uname</span> -r</span><br><span class="line">   17388 bash                 2023-06-24 15:56:29 UTC+0000   @</span><br><span class="line">   17388 bash                 2023-06-24 15:56:29 UTC+0000   <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">   17388 bash                 2023-06-24 15:57:13 UTC+0000   yum install kernel-headers kernel-devel gcc elfutils-libelf-devel make git libdwarf-tools python2-devel.x86_64 -y</span><br><span class="line">   17388 bash                 2023-06-24 15:57:17 UTC+0000   sudo su</span><br></pre></td></tr></table></figure>



<blockquote>
<p>其余版本profile待续</p>
</blockquote>
]]></content>
      <categories>
        <category>内存取证</category>
      </categories>
  </entry>
  <entry>
    <title>volatility2与3使用笔记</title>
    <url>/2023/07/01/volatility2%E4%B8%8E3%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="volatility2与3使用笔记"><a href="#volatility2与3使用笔记" class="headerlink" title="volatility2与3使用笔记"></a>volatility2与3使用笔记</h1><h2 id="需分析内容"><a href="#需分析内容" class="headerlink" title="需分析内容"></a>需分析内容</h2><ul>
<li>系统进程信息<ul>
<li>pstree</li>
<li>psaux</li>
</ul>
</li>
<li>系统网络信息</li>
<li>系统打开文件</li>
</ul>
<p>提供标识LiME制作内存镜像文件, 可以利用<strong>banner</strong>中关键词搜索“<strong>Linux Version</strong>”找到相关的内核版本. 从而再进一步选择<strong>Volatility2</strong>的<strong>Profile</strong>或者<strong>Volatility3</strong>的<strong>Symbols</strong>.</p>
<h2 id="volatility3"><a href="#volatility3" class="headerlink" title="volatility3"></a>volatility3</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h4><table>
<thead>
<tr>
<th>模块名称</th>
<th>简要功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>plugins.linux.bash</td>
<td>提取和分析Bash历史记录</td>
</tr>
<tr>
<td>plugins.linux.check_afinfo</td>
<td>检查网络地址族信息</td>
</tr>
<tr>
<td>plugins.linux.check_creds</td>
<td>检查和提取进程凭证信息</td>
</tr>
<tr>
<td>plugins.linux.check_idt</td>
<td>检查和分析中断描述表 (IDT)</td>
</tr>
<tr>
<td>plugins.linux.check_modules</td>
<td>检查已加载的内核模块</td>
</tr>
<tr>
<td>plugins.linux.check_syscall</td>
<td>检查和分析系统调用表 (Syscall Table)</td>
</tr>
<tr>
<td>plugins.linux.elfs</td>
<td>检查和分析 ELF 格式的二进制文件</td>
</tr>
<tr>
<td>plugins.linux.envars</td>
<td>提取和分析环境变量</td>
</tr>
<tr>
<td>plugins.linux.envvars</td>
<td>提取和分析环境变量</td>
</tr>
<tr>
<td>plugins.linux.iomem</td>
<td>提取和分析物理内存映射</td>
</tr>
<tr>
<td>plugins.linux.keyboard_notifiers</td>
<td>检查和分析键盘事件通知</td>
</tr>
<tr>
<td>plugins.linux.kmsg</td>
<td>提取和分析内核消息缓冲区 (KMSG)</td>
</tr>
<tr>
<td>plugins.linux.lsmod</td>
<td>列出已加载的内核模块</td>
</tr>
<tr>
<td>plugins.linux.lsof</td>
<td>列出打开的文件和进程</td>
</tr>
<tr>
<td>plugins.linux.malfind</td>
<td>检测并分析可能的恶意进程</td>
</tr>
<tr>
<td>plugins.linux.mountinfo</td>
<td>提取和分析挂载信息</td>
</tr>
<tr>
<td>plugins.linux.proc</td>
<td>提取和分析进程信息</td>
</tr>
<tr>
<td>plugins.linux.psaux</td>
<td>列出详细的进程信息</td>
</tr>
<tr>
<td>plugins.linux.pslist</td>
<td>列出进程列表</td>
</tr>
<tr>
<td>plugins.linux.psscan</td>
<td>扫描物理内存以查找进程结构</td>
</tr>
<tr>
<td>plugins.linux.pstree</td>
<td>列出进程层次结构</td>
</tr>
<tr>
<td>plugins.linux.sockstat</td>
<td>提取和分析网络套接字信息</td>
</tr>
<tr>
<td>plugins.linux.tty_check</td>
<td>检查和分析tty设备</td>
</tr>
</tbody></table>
<h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><h4 id="模块列表-1"><a href="#模块列表-1" class="headerlink" title="模块列表"></a>模块列表</h4><table>
<thead>
<tr>
<th>模块名称</th>
<th>简要功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>plugins.mac.bash</td>
<td>提取和分析Bash历史记录</td>
</tr>
<tr>
<td>plugins.mac.check_syscall</td>
<td>检查和分析系统调用表 (Syscall Table)</td>
</tr>
<tr>
<td>plugins.mac.check_sysctl</td>
<td>检查和分析系统控制变量</td>
</tr>
<tr>
<td>plugins.mac.check_trap_table</td>
<td>检查和分析陷阱表 (Trap Table)</td>
</tr>
<tr>
<td>plugins.mac.ifconfig</td>
<td>获取和分析网络接口配置信息</td>
</tr>
<tr>
<td>plugins.mac.kauth_listeners</td>
<td>列出内核认证侦听器</td>
</tr>
<tr>
<td>plugins.mac.kauth_scopes</td>
<td>列出内核认证范围</td>
</tr>
<tr>
<td>plugins.mac.kevents</td>
<td>检查和分析内核事件 (Kevents)</td>
</tr>
<tr>
<td>plugins.mac.list_files</td>
<td>列出文件和目录</td>
</tr>
<tr>
<td>plugins.mac.lsmod</td>
<td>列出已加载的内核模块</td>
</tr>
<tr>
<td>plugins.mac.lsof</td>
<td>列出打开的文件和进程</td>
</tr>
<tr>
<td>plugins.mac.malfind</td>
<td>检测并分析可能的恶意进程</td>
</tr>
<tr>
<td>plugins.mac.mount</td>
<td>检查和分析挂载信息</td>
</tr>
<tr>
<td>plugins.mac.netstat</td>
<td>提取和分析网络连接信息</td>
</tr>
<tr>
<td>plugins.mac.proc_maps</td>
<td>提取和分析进程内存映射</td>
</tr>
<tr>
<td>plugins.mac.psaux</td>
<td>列出详细的进程信息</td>
</tr>
<tr>
<td>plugins.mac.pslist</td>
<td>列出进程列表</td>
</tr>
<tr>
<td>plugins.mac.pstree</td>
<td>列出进程层次结构</td>
</tr>
<tr>
<td>plugins.mac.socket_filters</td>
<td>检查和分析套接字过滤器</td>
</tr>
<tr>
<td>plugins.mac.timers</td>
<td>检查和分析内核计时器 (Timers)</td>
</tr>
<tr>
<td>plugins.mac.trustedbsd</td>
<td>检查和分析TrustedBSD模块</td>
</tr>
<tr>
<td>plugins.mac.vfsevents</td>
<td>检查和分析VFS事件</td>
</tr>
</tbody></table>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="模块列表-2"><a href="#模块列表-2" class="headerlink" title="模块列表"></a>模块列表</h4><table>
<thead>
<tr>
<th>模块名称</th>
<th>简要功能介绍</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>plugins.windows.registry</td>
<td>用于操作和分析Windows注册表的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.bigpools</td>
<td>分析和提取Windows大内存池中的对象</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.cachedump</td>
<td>导出和分析Windows缓存的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.callbacks</td>
<td>分析和提取Windows回调函数的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.cmdline</td>
<td>提取和分析Windows进程的命令行参数</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.crashinfo</td>
<td>提取和分析Windows崩溃转储信息</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.devicetree</td>
<td>分析和提取Windows设备树的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.dlllist</td>
<td>列出Windows进程加载的DLL模块</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” windows.dlllist ‑‑pid <PID></td>
</tr>
<tr>
<td>plugins.windows.driverirp</td>
<td>分析和提取Windows驱动程序的IRP调用</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.drivermodule</td>
<td>分析和提取Windows驱动程序模块的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.driverscan</td>
<td>扫描物理内存以查找Windows驱动程序结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.dumpfiles</td>
<td>导出和分析Windows进程的内存转储</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” -o “&#x2F;path&#x2F;to&#x2F;dir” windows.dumpfiles ‑‑pid <PID></td>
</tr>
<tr>
<td>plugins.windows.envars</td>
<td>提取和分析Windows进程的环境变量</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.filescan</td>
<td>在物理内存中扫描文件结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.getservicesids</td>
<td>获取Windows服务的安全标识符</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.getsids</td>
<td>获取Windows进程和线程的安全标识符</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.handles</td>
<td>列出Windows进程的句柄和对象(PID、进程、偏移量、句柄值、类型、grantedaccess、名称)</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” windows.handles ‑‑pid <PID></td>
</tr>
<tr>
<td>plugins.windows.hashdump</td>
<td>导出和分析Windows密码哈希值</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.info</td>
<td>提取和分析Windows系统信息</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” windows.info</td>
</tr>
<tr>
<td>plugins.windows.joblinks</td>
<td>检查和分析Windows作业链接</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.ldrmodules</td>
<td>列出Windows进程加载的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.lsadump</td>
<td>导出和分析Windows本地安全认证信息</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.malfind</td>
<td>检测并分析可能的恶意进程</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.mbrscan</td>
<td>扫描物理内存中的主引导记录</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.memmap</td>
<td>列出物理内存映射</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” -o “&#x2F;path&#x2F;to&#x2F;dir” windows.memmap ‑‑dump ‑‑pid <PID></td>
</tr>
<tr>
<td>plugins.windows.mftscan</td>
<td>扫描物理内存中的Master File Table (MFT)</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.modscan</td>
<td>扫描物理内存中的模块结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.modules</td>
<td>列出Windows进程加载的模块</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.mutantscan</td>
<td>扫描物理内存以查找Windows互斥体结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.netscan</td>
<td>扫描物理内存以查找Windows网络连接结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.netstat</td>
<td>提取和分析Windows网络连接信息</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.poolscanner</td>
<td>扫描物理内存以查找Windows内存池结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.privileges</td>
<td>列出Windows进程的特权</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.pslist</td>
<td>列出Windows进程列表</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.psscan</td>
<td>扫描物理内存以查找Windows进程结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.pstree</td>
<td>列出Windows进程层次结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.sessions</td>
<td>列出Windows登录会话</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.skeleton_key_check</td>
<td>检查是否存在Skeleton Key攻击</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.ssdt</td>
<td>分析和提取Windows系统服务描述符表 (SSDT)</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.strings</td>
<td>提取和分析Windows进程中的字符串</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.svcscan</td>
<td>扫描物理内存以查找Windows服务结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.symlinkscan</td>
<td>扫描物理内存以查找Windows符号链接结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.vadinfo</td>
<td>提取和分析Windows虚拟地址描述符 (VAD)</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.vadwalk</td>
<td>遍历Windows虚拟地址描述符 (VAD)</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.verinfo</td>
<td>提取和分析Windows可执行文件版本信息</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.volshell</td>
<td>在Windows上运行Volatility命令</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.wintree</td>
<td>列出Windows窗口层次结构</td>
<td></td>
</tr>
<tr>
<td>plugins.windows.yarascan</td>
<td>使用YARA规则扫描Windows内存</td>
<td></td>
</tr>
</tbody></table>
<h4 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> windows.registry.hivescan</span><br><span class="line"></span><br><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> windows.registry.hivelist</span><br><span class="line"></span><br><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> windows.registry.printkey</span><br><span class="line"></span><br><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> windows.registry.printkey ―key <span class="string">&quot;Software\Microsoft\Windows\CurrentVersion&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="转储文件"><a href="#转储文件" class="headerlink" title="转储文件"></a>转储文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> -o <span class="string">&quot;/path/to/dir&quot;</span> windows.dumpfiles</span><br><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> -o <span class="string">&quot;/path/to/dir&quot;</span> windows.dumpfiles ‑‑pid &lt;PID&gt;</span><br><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> -o <span class="string">&quot;/path/to/dir&quot;</span> windows.dumpfiles ‑‑virtaddr &lt;offset&gt;</span><br><span class="line">vol.py -f <span class="string">&quot;/path/to/file&quot;</span> -o <span class="string">&quot;/path/to/dir&quot;</span> windows.dumpfiles ‑‑physaddr &lt;offset&gt;</span><br></pre></td></tr></table></figure>



<h2 id="volatility2"><a href="#volatility2" class="headerlink" title="volatility2"></a>volatility2</h2><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><blockquote>
<p>参考链接：<a href="https://blog.didctf.com/2022/10/02/volatility/">Volatility学习笔记 - DIDCTF-Blog</a></p>
</blockquote>
<h4 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h4><p>检测这个内存镜像是哪个操作系统的内存镜像以及各种内存信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME imageinfo</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> kdbgscan</span><br></pre></td></tr></table></figure>

<p><a href="https://oss.didctf.com/blog/QQ%E6%88%AA%E5%9B%BE20221002191551.png"><img src="http://pic.rayi.sdpcsec.cn/QQ%25E6%2588%25AA%25E5%259B%25BE20221002191551.png" alt="img"></a></p>
<p>首先的一个重要参数是<code>Suggested Profile</code> 也就是他的电脑版本号，只有这个版本号才能进行之后的步骤。</p>
<p>例图中的<code>Suggested Profile</code>是有四个信息，但是大概率指向的版本是第一个。</p>
<p>如果<code>Suggested Profile</code>后面带了一个<code>Instantiated with XXXXX</code>就是说他建议是哪个电脑版本号，所以用它建议的就行，当然这个情况也不是全都有的，有时候他不建议，你就选你自己的就行。</p>
<p>下方的<code>Image date and time</code>是这个内存镜像的制作时间，默认是UTC+0的时间，这个参数的下一个<code>Image Local date and time</code>就是我们的UTC+8的时间(即本机的时区)。</p>
<h4 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h4><p><strong>pslist</strong>命令不仅显示了所有正在运行的进程，而且给出了有价值的信息，比如PID、PPID、启动的时间。</p>
<p><strong>pstree</strong>与pslist命令不同的地方在于还可以识别子进程以及父进程</p>
<p><strong>psscan</strong>命令可以显示出被恶意软件比如rootkit为了躲避用户或杀毒软件而隐藏的进程</p>
<p><strong>psxview</strong>查看进程列表(psx视图)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 pslist</span><br></pre></td></tr></table></figure>

<p>该命令为列出内存中的进程,包括进程PID、PPID以及启动时间，并可以清楚的看到父子进程的关系。</p>
<p><a href="https://oss.didctf.com/blog/20221002192541.png"><img src="http://pic.rayi.sdpcsec.cn/20221002192541.png" alt="img"></a></p>
<p>如果遇到隐藏的进程，可以使用如下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 psscan</span><br></pre></td></tr></table></figure>

<p>该命令为列出内存中的所有进程，包括进程PID、PPID以及启动时间，并可以清楚的看到父子进程的关系。</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002193659.png"><img src="http://pic.rayi.sdpcsec.cn/20221002193659.png" alt="img"></a></p>
<p>如果遇到名称伪装的进程，使用如下命令</p>
<p>进程树</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 pstree</span><br></pre></td></tr></table></figure>

<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002194020.png"><img src="http://pic.rayi.sdpcsec.cn/20221002194020.png" alt="img"></a></p>
<p>有些恶意进程会伪装成同名进程，通过进程树，看他不归属于不正常进程</p>
<p>例：很多恶意进程会伪装成svchost.exe，但svchost.exe的真正父进程是services.exe的。</p>
<h4 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h4><p>就是所谓的dll文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 dlllist</span><br></pre></td></tr></table></figure>

<p>该命令能看到每个进程（程序)运行所需要的所有动态链接库</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002194956.png"><img src="http://pic.rayi.sdpcsec.cn/20221002194956.png" alt="img"></a></p>
<h4 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 netscan</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; netscan</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; netstat</span><br><span class="line"></span><br><span class="line"><span class="comment"># XP/2003 SPECIFIC</span></span><br><span class="line"></span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; connscan</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; connections</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; sockscan</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; sockets</span><br></pre></td></tr></table></figure>

<p>该命令可查看所有进程的连接协议、本地地址、连接地址、状态、监听端口以及pid。</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002195228.png"><img src="http://pic.rayi.sdpcsec.cn/20221002195228.png" alt="img"></a></p>
<h4 id="内核驱动"><a href="#内核驱动" class="headerlink" title="内核驱动"></a>内核驱动</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 modules</span><br></pre></td></tr></table></figure>

<p>该命令查看内核驱动,modscan、driverscan可查看一些隐藏的内核驱动。</p>
<h4 id="提取进程程序"><a href="#提取进程程序" class="headerlink" title="提取进程程序"></a>提取进程程序</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 procdump <span class="literal">-D</span> 路径 <span class="literal">-p</span> 进程号PID</span><br></pre></td></tr></table></figure>

<p>注意此命令会自动修改名称，修改后的名称就是图中的 Result的内容</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002195920.png"><img src="http://pic.rayi.sdpcsec.cn/20221002195920.png" alt="img"></a></p>
<h4 id="内存文件"><a href="#内存文件" class="headerlink" title="内存文件"></a>内存文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 filescan</span><br></pre></td></tr></table></figure>

<p>该命令能扫描内存中的文件</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002201224.png"><img src="http://pic.rayi.sdpcsec.cn/20221002201224.png" alt="img"></a></p>
<h4 id="导出内存中缓存的文件"><a href="#导出内存中缓存的文件" class="headerlink" title="导出内存中缓存的文件"></a>导出内存中缓存的文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 dumpfiles <span class="literal">-Q</span> 内存中的位置 <span class="literal">-D</span> 导出路径</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; dumpfiles ‑‑dump<span class="literal">-dir</span>=<span class="string">&quot;/path/to/dir&quot;</span></span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; dumpfiles ‑‑dump<span class="literal">-dir</span>=<span class="string">&quot;/path/to/dir&quot;</span> <span class="literal">-Q</span> &lt;offset&gt;</span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; dumpfiles ‑‑dump<span class="literal">-dir</span>=<span class="string">&quot;/path/to/dir&quot;</span> <span class="literal">-p</span> &lt;PID&gt;</span><br></pre></td></tr></table></figure>

<p>该命令能导出内存中缓存的文件</p>
<p>-Q的内容就是filescan中第一行的Offset</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002201617.png"><img src="http://pic.rayi.sdpcsec.cn/20221002201617.png" alt="img"></a></p>
<h4 id="注册表-1"><a href="#注册表-1" class="headerlink" title="注册表"></a>注册表</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 hivelist</span><br></pre></td></tr></table></figure>

<p>该命令能列举在内存中的注册表</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002201403.png"><img src="http://pic.rayi.sdpcsec.cn/20221002201403.png" alt="img"></a></p>
<h4 id="cmd命令情况"><a href="#cmd命令情况" class="headerlink" title="cmd命令情况"></a>cmd命令情况</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 cmdline</span><br><span class="line"></span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; cmdscan</span><br><span class="line"></span><br><span class="line">vol.py <span class="operator">-f</span> <span class="string">&quot;/path/to/file&quot;</span> ‑‑profile &lt;profile&gt; consoles</span><br></pre></td></tr></table></figure>

<p>该命令能提取内存中保留的cmd命令使用情况</p>
<h4 id="获取SAM表中的用户"><a href="#获取SAM表中的用户" class="headerlink" title="获取SAM表中的用户"></a>获取SAM表中的用户</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 printkey <span class="literal">-K</span> <span class="string">&quot;SAM\Domprintkeyains\Account\Users\Names&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意”SAM\Domprintkeyains\Account\Users\Names”这个路径是固定的，不用改变。</p>
<h4 id="最后登录的用户"><a href="#最后登录的用户" class="headerlink" title="最后登录的用户"></a>最后登录的用户</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 printkey <span class="literal">-K</span> <span class="string">&quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogin&quot;</span></span><br></pre></td></tr></table></figure>

<p>该名称能查看最后登录系统的账户</p>
<h4 id="密码hash"><a href="#密码hash" class="headerlink" title="密码hash"></a>密码hash</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 hashdump <span class="literal">-y</span> 注册表 system 的 virtual地址 <span class="literal">-s</span> SAM的virtual地址</span><br></pre></td></tr></table></figure>

<p>该命令能从内存中获取密码hash</p>
<p>virtual从hivelist注册表中获得。</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002203604.png"><img src="http://pic.rayi.sdpcsec.cn/20221002203604.png" alt="img"></a></p>
<h4 id="Windows服务"><a href="#Windows服务" class="headerlink" title="Windows服务"></a>Windows服务</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">volatility_2.<span class="number">6</span>_win64_standalone.exe <span class="operator">-f</span> FILENAME <span class="literal">--profile</span>=版本号 svcscan </span><br></pre></td></tr></table></figure>

<p>该命令能查看Windwos的服务</p>
<p><a href="https://didctf-blog-post.oss-cn-beijing.aliyuncs.com/post/volatility/20221002203006.png"><img src="http://pic.rayi.sdpcsec.cn/20221002203006.png" alt="img"></a></p>
<p>有些服务不一定有进程，所以PID为空。</p>
<h4 id="MFT文件索引"><a href="#MFT文件索引" class="headerlink" title="MFT文件索引"></a>MFT文件索引</h4><p><a href="https://www.baidu.com/s?wd=NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS文件系统</a>是微软自Windows NT系统后引入的全新的文件系统。在<a href="https://www.baidu.com/s?wd=NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS文件系统</a>里，磁盘上的所有东西都以文件的形式保存在<a href="https://www.baidu.com/s?wd=NTFS%E5%88%86%E5%8C%BA&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS分区</a>内，包括文件系统自身的结构和记录也是如此。NTFS中，卷中所有存放的数据均在一个叫$MFT的文件中，叫主文件表(Master File Table)，在MFT中保存了<a href="https://www.baidu.com/s?wd=NTFS%E5%88%86%E5%8C%BA&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS分区</a>上所有文件的索引，<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">操作系统</a>根据这个索引来检索问价。在使用mftparser插件时发现了flag.zip 和 flag.rar</p>
<p><code>volatility -f mem.raw --profile=Win7SP1x86 mftparser &gt; mft.txt</code></p>
<p>内容很多，随查找了一下flag关键字。</p>
<p><img src="http://pic.rayi.sdpcsec.cn/006y8mN6ly1g7xxiekk7jj313w08w0sr.jpg"></p>
<h4 id="所有编辑框中的内容"><a href="#所有编辑框中的内容" class="headerlink" title="所有编辑框中的内容"></a>所有编辑框中的内容</h4><p>这里有个更简单的办法，直接用<code>editbox</code>插件，即可看到系统中所有编辑控件中的编辑内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ volatility2 -f ./mem.raw --profile=Win7SP1x86 editbox</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">******************************</span><br><span class="line">Wnd Context       : 1\WinSta0\Default</span><br><span class="line">Process ID        : 3640</span><br><span class="line">ImageFileName     : iexplore.exe</span><br><span class="line">IsWow64           : No</span><br><span class="line">atom_class        : 6.0.7600.16385!Edit</span><br><span class="line">value-of WndExtra : 0x4a13b8</span><br><span class="line">nChars            : 0</span><br><span class="line">selStart          : 0</span><br><span class="line">selEnd            : 0</span><br><span class="line">isPwdControl      : False</span><br><span class="line">undoPos           : 0</span><br><span class="line">undoLen           : 0</span><br><span class="line">address-of undoBuf: 0x0</span><br><span class="line">undoBuf           :</span><br><span class="line">-------------------------</span><br><span class="line"></span><br><span class="line">******************************</span><br><span class="line">Wnd Context       : 1\WinSta0\Default</span><br><span class="line">Process ID        : 3640</span><br><span class="line">ImageFileName     : iexplore.exe</span><br><span class="line">IsWow64           : No</span><br><span class="line">atom_class        : 6.0.7600.16385!Edit</span><br><span class="line">value-of WndExtra : 0x49f3d0</span><br><span class="line">nChars            : 60</span><br><span class="line">selStart          : 0</span><br><span class="line">selEnd            : 0</span><br><span class="line">isPwdControl      : False</span><br><span class="line">undoPos           : 0</span><br><span class="line">undoLen           : 0</span><br><span class="line">address-of undoBuf: 0x0</span><br><span class="line">undoBuf           :</span><br><span class="line">-------------------------</span><br><span class="line">https://pan.baidu.com/share/init?surl=jAVwrRzIgW1QsLHidtzY_w</span><br><span class="line">******************************</span><br><span class="line">Wnd Context       : 1\WinSta0\Default</span><br><span class="line">Process ID        : 3552</span><br><span class="line">ImageFileName     : notepad.exe</span><br><span class="line">IsWow64           : No</span><br><span class="line">atom_class        : 6.0.7600.16385!Edit</span><br><span class="line">value-of WndExtra : 0x177ad0</span><br><span class="line">nChars            : 78</span><br><span class="line">selStart          : 0</span><br><span class="line">selEnd            : 0</span><br><span class="line">isPwdControl      : False</span><br><span class="line">undoPos           : 0</span><br><span class="line">undoLen           : 0</span><br><span class="line">address-of undoBuf: 0x0</span><br><span class="line">undoBuf           :</span><br><span class="line">-------------------------</span><br><span class="line"><span class="built_in">where</span> is <span class="built_in">link</span>?链接: https://pan.baidu.com/s/ 提取码: heem 复制这段内容后打开百度网盘手机App，操作更方便哦</span><br></pre></td></tr></table></figure>

<p>两个提取码和提取链接都找到了</p>
<h3 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h3><table>
<thead>
<tr>
<th>插件名称</th>
<th align="left">功能</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>amcache</td>
<td align="left">查看AmCache应用程序痕迹信息</td>
<td></td>
</tr>
<tr>
<td>apihooks</td>
<td align="left">检测内核及进程的内存空间中的API hook</td>
<td></td>
</tr>
<tr>
<td>atoms</td>
<td align="left">列出会话及窗口站atom表</td>
<td></td>
</tr>
<tr>
<td>atomscan</td>
<td align="left">Atom表的池扫描(Pool scanner)</td>
<td></td>
</tr>
<tr>
<td>auditpol</td>
<td align="left">列出注册表HKLM\SECURITY\Policy\PolAdtEv的审计策略信息</td>
<td></td>
</tr>
<tr>
<td>bigpools</td>
<td align="left">使用BigPagePoolScanner转储大分页池(big page pools)</td>
<td></td>
</tr>
<tr>
<td>bioskbd</td>
<td align="left">从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)</td>
<td></td>
</tr>
<tr>
<td>cachedump</td>
<td align="left">获取内存中缓存的域帐号的密码哈希</td>
<td></td>
</tr>
<tr>
<td>callbacks</td>
<td align="left">打印全系统通知例程</td>
<td></td>
</tr>
<tr>
<td>clipboard</td>
<td align="left">提取Windows剪贴板中的内容</td>
<td></td>
</tr>
<tr>
<td>cmdline</td>
<td align="left">显示进程命令行参数</td>
<td></td>
</tr>
<tr>
<td><strong>cmdscan</strong></td>
<td align="left">提取执行的命令行历史记录（扫描_COMMAND_HISTORY信息）</td>
<td></td>
</tr>
<tr>
<td>connections</td>
<td align="left">打印系统打开的网络连接(仅支持Windows XP 和2003)</td>
<td></td>
</tr>
<tr>
<td>connscan</td>
<td align="left">打印TCP连接信息</td>
<td></td>
</tr>
<tr>
<td>consoles</td>
<td align="left">提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION信息）</td>
<td></td>
</tr>
<tr>
<td>crashinfo</td>
<td align="left">提取崩溃转储信息</td>
<td></td>
</tr>
<tr>
<td>deskscan</td>
<td align="left">tagDESKTOP池扫描(Poolscaner)</td>
<td></td>
</tr>
<tr>
<td>devicetree</td>
<td align="left">显示设备树信息</td>
<td></td>
</tr>
<tr>
<td>dlldump</td>
<td align="left">从进程地址空间转储动态链接库</td>
<td></td>
</tr>
<tr>
<td>dlllist</td>
<td align="left">打印每个进程加载的动态链接库列表</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 dlllist</td>
</tr>
<tr>
<td>driverirp</td>
<td align="left">IRP hook驱动检测</td>
<td></td>
</tr>
<tr>
<td>drivermodule</td>
<td align="left">关联驱动对象至内核模块</td>
<td></td>
</tr>
<tr>
<td>driverscan</td>
<td align="left">驱动对象池扫描</td>
<td></td>
</tr>
<tr>
<td>dumpcerts</td>
<td align="left">提取RAS私钥及SSL公钥</td>
<td></td>
</tr>
<tr>
<td><strong>dumpfiles</strong></td>
<td align="left">提取内存中映射或缓存的文件</td>
<td></td>
</tr>
<tr>
<td>dumpregistry</td>
<td align="left">转储内存中注册表信息至磁盘</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 dumpregistry</td>
</tr>
<tr>
<td><strong>editbox</strong></td>
<td align="left">查看Edit编辑控件信息 (Listbox正在实验中)</td>
<td></td>
</tr>
<tr>
<td>envars</td>
<td align="left">显示进程的环境变量</td>
<td></td>
</tr>
<tr>
<td>eventhooks</td>
<td align="left">打印Windows事件hook详细信息</td>
<td></td>
</tr>
<tr>
<td>evtlogs</td>
<td align="left">提取Windows事件日志（仅支持XP&#x2F;2003)</td>
<td></td>
</tr>
<tr>
<td><strong>filescan</strong></td>
<td align="left">提取文件对象（file objects）池信息</td>
<td></td>
</tr>
<tr>
<td>gahti</td>
<td align="left">转储用户句柄（handle）类型信息</td>
<td></td>
</tr>
<tr>
<td>gditimers</td>
<td align="left">打印已安装的GDI计时器(timers)及回调(callbacks)</td>
<td></td>
</tr>
<tr>
<td>gdt</td>
<td align="left">显示全局描述符表(Global Descriptor Table)</td>
<td></td>
</tr>
<tr>
<td>getservicesids</td>
<td align="left">获取注册表中的服务名称并返回SID信息</td>
<td></td>
</tr>
<tr>
<td>getsids</td>
<td align="left">打印每个进程的SID信息</td>
<td></td>
</tr>
<tr>
<td>handles</td>
<td align="left">打印每个进程打开的句柄的列表(Offset(V), PID, handle, access, type, details)</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” ‑‑profile <profile> handles -p <PID></td>
</tr>
<tr>
<td>hashdump</td>
<td align="left">转储内存中的Windows帐户密码哈希(LM&#x2F;NTLM)</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 hashdump</td>
</tr>
<tr>
<td>hibinfo</td>
<td align="left">转储休眠文件信息</td>
<td></td>
</tr>
<tr>
<td>hivedump</td>
<td align="left">打印注册表配置单元信息</td>
<td></td>
</tr>
<tr>
<td><strong>hivelist</strong></td>
<td align="left">打印注册表配置单元列表</td>
<td></td>
</tr>
<tr>
<td>hivescan</td>
<td align="left">注册表配置单元池扫描</td>
<td></td>
</tr>
<tr>
<td>hpakextract</td>
<td align="left">从HPAK文件（Fast Dump格式）提取物理内存数据</td>
<td></td>
</tr>
<tr>
<td>hpakinfo</td>
<td align="left">查看HPAK文件属性及相关信息</td>
<td></td>
</tr>
<tr>
<td>idt</td>
<td align="left">显示中断描述符表(Interrupt Descriptor Table)</td>
<td></td>
</tr>
<tr>
<td>iehistory</td>
<td align="left">重建IE缓存及访问历史记录</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 iehistory</td>
</tr>
<tr>
<td>imagecopy</td>
<td align="left">将物理地址空间导出原生DD镜像文件</td>
<td></td>
</tr>
<tr>
<td>imageinfo</td>
<td align="left">查看&#x2F;识别镜像信息</td>
<td></td>
</tr>
<tr>
<td>impscan</td>
<td align="left">扫描对导入函数的调用</td>
<td></td>
</tr>
<tr>
<td>joblinks</td>
<td align="left">打印进程任务链接信息</td>
<td></td>
</tr>
<tr>
<td>kdbgscan</td>
<td align="left">搜索和转储潜在KDBG值</td>
<td></td>
</tr>
<tr>
<td>kpcrscan</td>
<td align="left">搜索和转储潜在KPCR值</td>
<td></td>
</tr>
<tr>
<td>ldrmodules</td>
<td align="left">检测未链接的动态链接DLL</td>
<td></td>
</tr>
<tr>
<td>lsadump</td>
<td align="left">从注册表中提取LSA密钥信息（已解密）</td>
<td></td>
</tr>
<tr>
<td>machoinfo</td>
<td align="left">转储Mach-O 文件格式信息</td>
<td></td>
</tr>
<tr>
<td>malfind</td>
<td align="left">查找隐藏的和插入的代码</td>
<td></td>
</tr>
<tr>
<td>mbrparser</td>
<td align="left">扫描并解析潜在的主引导记录(MBR)</td>
<td></td>
</tr>
<tr>
<td>memdump</td>
<td align="left">转储进程的可寻址内存</td>
<td></td>
</tr>
<tr>
<td>memmap</td>
<td align="left">打印内存映射</td>
<td></td>
</tr>
<tr>
<td>messagehooks</td>
<td align="left">桌面和窗口消息钩子的线程列表</td>
<td></td>
</tr>
<tr>
<td><strong>mftparser</strong></td>
<td align="left">扫描并解析潜在的MFT条目</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 mftparser  –output-file&#x3D;mftverbose.txt -D mftoutput</td>
</tr>
<tr>
<td>moddump</td>
<td align="left">转储内核驱动程序到可执行文件的示例</td>
<td></td>
</tr>
<tr>
<td>modscan</td>
<td align="left">内核模块池扫描</td>
<td></td>
</tr>
<tr>
<td>modules</td>
<td align="left">打印加载模块的列表</td>
<td></td>
</tr>
<tr>
<td>multiscan</td>
<td align="left">批量扫描各种对象</td>
<td></td>
</tr>
<tr>
<td>mutantscan</td>
<td align="left">对互斥对象池扫描</td>
<td></td>
</tr>
<tr>
<td><strong>notepad</strong></td>
<td align="left">查看记事本当前显示的文本</td>
<td></td>
</tr>
<tr>
<td>netscan</td>
<td align="left">查看网络通讯连接</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 netscan</td>
</tr>
<tr>
<td>objtypescan</td>
<td align="left">扫描窗口对象类型对象</td>
<td></td>
</tr>
<tr>
<td>patcher</td>
<td align="left">基于页面扫描的补丁程序内存</td>
<td></td>
</tr>
<tr>
<td>poolpeek</td>
<td align="left">可配置的池扫描器插件</td>
<td></td>
</tr>
<tr>
<td>printkey</td>
<td align="left">打印注册表项及其子项和值</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” ‑‑profile <profile> printkey -K “Software\Microsoft\Windows\CurrentVersion”</td>
</tr>
<tr>
<td>privs</td>
<td align="left">显示进程权限</td>
<td></td>
</tr>
<tr>
<td>procdump</td>
<td align="left">进程转储到一个可执行文件示例</td>
<td>vol.py -f “&#x2F;path&#x2F;to&#x2F;file” ‑‑profile <profile> procdump -p <PID> ‑‑dump-dir&#x3D;”&#x2F;path&#x2F;to&#x2F;dir”</td>
</tr>
<tr>
<td><strong>pslist</strong></td>
<td align="left">按照EPROCESS列表打印所有正在运行的进程</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 pslist</td>
</tr>
<tr>
<td>psscan</td>
<td align="left">进程对象池扫描</td>
<td></td>
</tr>
<tr>
<td><strong>pstree</strong></td>
<td align="left">以树型方式打印进程列表</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 pstree</td>
</tr>
<tr>
<td>psxview</td>
<td align="left">查看进程列表(psx视图)</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 psxview</td>
</tr>
<tr>
<td>qemuinfo</td>
<td align="left">转储Qemu 信息</td>
<td></td>
</tr>
<tr>
<td>raw2dmp</td>
<td align="left">将物理内存原生数据转换为windbg崩溃转储格式</td>
<td></td>
</tr>
<tr>
<td>screenshot</td>
<td align="left">基于GDI Windows的虚拟屏幕截图保存</td>
<td></td>
</tr>
<tr>
<td>servicediff</td>
<td align="left">Windows服务列表(ala Plugx)</td>
<td></td>
</tr>
<tr>
<td>sessions</td>
<td align="left">_MM_SESSION_SPACE的详细信息列表(用户登录会话)</td>
<td></td>
</tr>
<tr>
<td>shellbags</td>
<td align="left">打印Shellbags信息</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 shellbags</td>
</tr>
<tr>
<td>shimcache</td>
<td align="left">解析应用程序兼容性Shim缓存注册表项</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 shimcache</td>
</tr>
<tr>
<td>shutdowntime</td>
<td align="left">从内存中的注册表信息获取机器关机时间</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 shutdowntime</td>
</tr>
<tr>
<td>sockets</td>
<td align="left">打印已打开套接字列表</td>
<td></td>
</tr>
<tr>
<td>sockscan</td>
<td align="left">TCP套接字对象池扫描</td>
<td></td>
</tr>
<tr>
<td>ssdt</td>
<td align="left">显示SSDT条目</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 ssdt</td>
</tr>
<tr>
<td>strings</td>
<td align="left">物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)</td>
<td></td>
</tr>
<tr>
<td>svcscan</td>
<td align="left">Windows服务列表扫描</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 svcscan</td>
</tr>
<tr>
<td>symlinkscan</td>
<td align="left">符号链接对象池扫描</td>
<td></td>
</tr>
<tr>
<td>thrdscan</td>
<td align="left">线程对象池扫描</td>
<td></td>
</tr>
<tr>
<td>threads</td>
<td align="left">调查_ETHREAD 和_KTHREADs</td>
<td></td>
</tr>
<tr>
<td>timeliner</td>
<td align="left">创建内存中的各种痕迹信息的时间线</td>
<td></td>
</tr>
<tr>
<td>timers</td>
<td align="left">打印内核计时器及关联模块的DPC</td>
<td></td>
</tr>
<tr>
<td>truecryptmaster</td>
<td align="left">恢复TrueCrypt 7.1a主密钥</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 truecryptmaster</td>
</tr>
<tr>
<td><strong>truecryptpassphrase</strong></td>
<td align="left">查找并提取TrueCrypt密码</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 truecryptpassphrase</td>
</tr>
<tr>
<td>truecryptsummary</td>
<td align="left">TrueCrypt摘要信息</td>
<td></td>
</tr>
<tr>
<td>unloadedmodules</td>
<td align="left">打印卸载的模块信息列表</td>
<td></td>
</tr>
<tr>
<td>userassist</td>
<td align="left">打印注册表中UserAssist相关信息</td>
<td>Vol.exe -f mem.raw –profile&#x3D;Win7SP1x86 userassist</td>
</tr>
<tr>
<td>userhandles</td>
<td align="left">转储用户句柄表</td>
<td></td>
</tr>
<tr>
<td>vaddump</td>
<td align="left">转储VAD数据为文件</td>
<td></td>
</tr>
<tr>
<td>vadinfo</td>
<td align="left">转储VAD信息</td>
<td></td>
</tr>
<tr>
<td>vadtree</td>
<td align="left">以树形方式显示VAD树信息</td>
<td></td>
</tr>
<tr>
<td>vadwalk</td>
<td align="left">显示遍历VAD树</td>
<td></td>
</tr>
<tr>
<td>vboxinfo</td>
<td align="left">转储Virtualbox信息（虚拟机）</td>
<td></td>
</tr>
<tr>
<td>verinfo</td>
<td align="left">打印PE镜像中的版本信息</td>
<td></td>
</tr>
<tr>
<td>vmwareinfo</td>
<td align="left">转储VMware VMSS&#x2F;VMSN 信息</td>
<td></td>
</tr>
<tr>
<td><strong>volshell</strong></td>
<td align="left">内存镜像中的shell</td>
<td></td>
</tr>
<tr>
<td><strong>windows</strong></td>
<td align="left">打印桌面窗口(详细信息)</td>
<td></td>
</tr>
<tr>
<td>wintree</td>
<td align="left">Z顺序打印桌面窗口树</td>
<td></td>
</tr>
<tr>
<td>wndscan</td>
<td align="left">池扫描窗口站</td>
<td></td>
</tr>
<tr>
<td>yarascan</td>
<td align="left">以Yara签名扫描进程或内核内存</td>
<td></td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="forensic-–-RoarCTF"><a href="#forensic-–-RoarCTF" class="headerlink" title="forensic – RoarCTF"></a>forensic – RoarCTF</h4><p>发现是内存取证，使用Volatility内存取证神器。</p>
<p>利用 npm install <strong>-g cnpm –registry</strong>&#x3D;<strong><a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong>-f mem.raw imageinfo&#96;查看镜像信息</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">➜  RoarCTF volatility -f mem.raw imageinfo</span><br><span class="line">Volatility Foundation Volatility Framework <span class="number">2.6</span></span><br><span class="line">INFO    : volatility.debug    : Determining profile based <span class="keyword">on</span> KDBG search...</span><br><span class="line">          Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86</span><br><span class="line">                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)</span><br><span class="line">                     AS Layer2 : FileAddressSpace (/media/psf/Home/Documents/CTF-time/RoarCTF/mem.raw)</span><br><span class="line">                      PAE type : PAE</span><br><span class="line">                           DTB : <span class="number">0</span>x185000L</span><br><span class="line">                          KDBG : <span class="number">0</span>x81729be8L</span><br><span class="line">          Number of Processors : <span class="number">2</span></span><br><span class="line">     Image Type (Service Pack) : <span class="number">0</span></span><br><span class="line">                KPCR <span class="keyword">for</span> CPU <span class="number">0</span> : <span class="number">0</span>x8172ac00L</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU <span class="number">1</span> : <span class="number">0</span>x807ec000L</span><br><span class="line">             KUSER_SHARED_DATA : <span class="number">0</span>xffdf0000L</span><br><span class="line">           Image date <span class="keyword">and</span> time : <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">55</span>:<span class="number">23</span> UTC+<span class="number">0000</span></span><br><span class="line">     Image local date <span class="keyword">and</span> time : <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">23</span> +<span class="number">0800</span></span><br></pre></td></tr></table></figure>

<p>根据<code>Suggested Profile(s)</code>值猜测他是Win7SP1x86_23418，所以利用<code>--profile=Win7SP1x86_23418</code></p>
<p>利用<code>volatility -f mem.raw --profile=Win7SP0x86 psscan</code>查看所有进程，通过所有进程来查看是否有可疑进程出现，进行进一步取证。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">➜  RoarCTF volatility -f mem.raw --profile=Win7SP0x86 psscan      </span><br><span class="line">Volatility Foundation Volatility Framework <span class="number">2.6</span></span><br><span class="line">Offset(P)          <span class="keyword">Name</span>                PID   PPID PDB        Time created                   Time exited                   </span><br><span class="line">------------------ ---------------- ------ ------ ---------- ------------------------------ ------------------------------</span><br><span class="line"><span class="number">0</span>x000000001de20d40 svchost.exe        <span class="number">2088</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b440 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">09</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001de23cd8 wininit.exe         <span class="number">420</span>    <span class="number">344</span> <span class="number">0</span>x1ef9b0a0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">06</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001de99708 SearchProtocol     <span class="number">2868</span>   <span class="number">2788</span> <span class="number">0</span>x1ef9b4e0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">15</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e00fd40 svchost.exe        <span class="number">1224</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b240 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e031ae8 taskhost.exe       <span class="number">1772</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b2c0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e074d40 svchost.exe        <span class="number">1372</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b280 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e0855a0 sppsvc.exe         <span class="number">2720</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b160 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">14</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e0c8d40 taskeng.exe        <span class="number">1512</span>    <span class="number">892</span> <span class="number">0</span>x1ef9b2e0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e0da270 dwm.exe            <span class="number">1548</span>    <span class="number">856</span> <span class="number">0</span>x1ef9b320 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e0fa838 explorer.exe       <span class="number">1636</span>   <span class="number">1528</span> <span class="number">0</span>x1ef9b340 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e1065c0 imdsksvc.exe       <span class="number">1700</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b360 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e10f930 coherence.exe      <span class="number">1732</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b380 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e131d40 prl_tools_serv     <span class="number">1784</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b3a0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e14c030 coherence.exe      <span class="number">1864</span>   <span class="number">1732</span> <span class="number">0</span>x1ef9b3c0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e158b38 dllhost.exe        <span class="number">1888</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b3e0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">09</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e17cd40 msdtc.exe          <span class="number">2484</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b420 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">10</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e1e9b38 dllhost.exe        <span class="number">1392</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b480 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">09</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e1fcd40 prl_cc.exe         <span class="number">1980</span>   <span class="number">1896</span> <span class="number">0</span>x1ef9b4a0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">09</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e1ffd40 VSSVC.exe           <span class="number">296</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b460 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">09</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e228a58 lsm.exe             <span class="number">544</span>    <span class="number">420</span> <span class="number">0</span>x1ef9b100 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e268520 svchost.exe         <span class="number">644</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b120 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e33e030 svchost.exe         <span class="number">804</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b180 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e361938 svchost.exe         <span class="number">856</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b1a0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e36b030 svchost.exe         <span class="number">892</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b1c0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e383718 audiodg.exe         <span class="number">964</span>    <span class="number">804</span> <span class="number">0</span>x1ef9b1e0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e39b8b0 svchost.exe        <span class="number">1036</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b200 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e3cc728 WUDFHost.exe       <span class="number">1160</span>    <span class="number">856</span> <span class="number">0</span>x1ef9b220 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e437c38 SearchIndexer.     <span class="number">2788</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b4c0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">15</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e439a68 svchost.exe         <span class="number">716</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b140 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001e5af8b0 lsass.exe           <span class="number">536</span>    <span class="number">420</span> <span class="number">0</span>x1ef9b0e0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">07</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ec15d40 smss.exe            <span class="number">272</span>      <span class="number">4</span> <span class="number">0</span>x1ef9b020 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">04</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ec2b030 spoolsv.exe        <span class="number">1340</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b260 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">08</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ec44d40 prl_tools.exe      <span class="number">1896</span>   <span class="number">1784</span> <span class="number">0</span>x1ef9b400 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">09</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ec72bf8 winlogon.exe        <span class="number">492</span>    <span class="number">412</span> <span class="number">0</span>x1ef9b0c0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">06</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ec98030 svchost.exe        <span class="number">3648</span>    <span class="number">504</span> <span class="number">0</span>x1ef9b560 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">57</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001edda270 csrss.exe           <span class="number">428</span>    <span class="number">412</span> <span class="number">0</span>x1ef9b040 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">06</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001eddad40 services.exe        <span class="number">504</span>    <span class="number">420</span> <span class="number">0</span>x1ef9b080 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">06</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ef04600 SearchFilterHo     <span class="number">2888</span>   <span class="number">2788</span> <span class="number">0</span>x1ef9b500 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">15</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ef56030 WmiPrvSE.exe       <span class="number">3016</span>    <span class="number">644</span> <span class="number">0</span>x1ef9b2a0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">55</span>:<span class="number">10</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ef8dad8 notepad.exe        <span class="number">3524</span>   <span class="number">1636</span> <span class="number">0</span>x1ef9b300 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">51</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ef9f030 TrueCrypt.exe      <span class="number">3260</span>   <span class="number">3072</span> <span class="number">0</span>x1ef9b580 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">22</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001efbf6c8 csrss.exe           <span class="number">364</span>    <span class="number">344</span> <span class="number">0</span>x1ef9b060 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">06</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001efce468 mspaint.exe        <span class="number">3620</span>   <span class="number">1636</span> <span class="number">0</span>x1ef9b540 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">57</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001fc893f0 iexplore.exe       <span class="number">3700</span>   <span class="number">1636</span> <span class="number">0</span>x1ef9b520 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">03</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001fcacd40 iexplore.exe       <span class="number">3752</span>   <span class="number">3700</span> <span class="number">0</span>x1ef9b5a0 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">04</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001fcff848 conhost.exe        <span class="number">3204</span>    <span class="number">428</span> <span class="number">0</span>x1ef9b620 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">55</span>:<span class="number">15</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001fcffb38 DumpIt.exe         <span class="number">3380</span>   <span class="number">1636</span> <span class="number">0</span>x1ef9b600 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">55</span>:<span class="number">15</span> UTC+<span class="number">0000</span>                                 </span><br><span class="line"><span class="number">0</span>x000000001ffaf950 <span class="keyword">System</span>                <span class="number">4</span>      <span class="number">0</span> <span class="number">0</span>x00185000 <span class="number">2019</span>-<span class="number">09</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">04</span> UTC+<span class="number">0000</span></span><br></pre></td></tr></table></figure>

<p>通过观察进程可以看到 <code>DumpIt.exe</code>此项进程，这个便是dump内存时的进程。</p>
<p>进程中有notepad.exe进程PID为 3524 我们提取一下，看看有无线索.</p>
<p>利用 memdump 提取，文件将以进程号命名</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">➜  RoarCTF volatility -f mem.raw --profile=Win7SP0x86 memdump -p <span class="number">3524</span> -D ./</span><br><span class="line">Volatility Foundation Volatility Framework <span class="number">2.6</span></span><br><span class="line">************************************************************************</span><br><span class="line">Writing notepad.exe [  <span class="number">3524</span>] <span class="keyword">to</span> <span class="number">3524</span>.dmp</span><br></pre></td></tr></table></figure>

<p>查找 notpad 有关flag的</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">➜  RoarCTF strings <span class="number">3524</span>.dmp| grep flag</span><br><span class="line">flag.txt</span><br><span class="line">M:\flag.txt</span><br><span class="line">flag.zip</span><br><span class="line">M:\flag.zip</span><br><span class="line">flag.txt0</span><br><span class="line">; Hack flag: <span class="number">00000000.00000800</span></span><br><span class="line">; Set a hack flag <span class="keyword">to</span> ignore the boot config <span class="keyword">for</span> these chipset-integrated bridge.</span><br><span class="line">; Hack flag: <span class="number">00000000.02000000</span></span><br><span class="line">; Set a hack flag <span class="keyword">to</span> force a bridge <span class="keyword">window</span> alignment <span class="keyword">to</span> match the length of its</span><br><span class="line">; Hack flag: <span class="number">00000010.00000000</span></span><br><span class="line">; Set a hack flag <span class="keyword">to</span> fail query <span class="comment">remove on pci device.</span></span><br><span class="line">; Hack flag: <span class="number">00000400.00000000</span></span><br><span class="line">; Set a hack flag <span class="keyword">to</span> disable power management downstream of a pci bridge.</span><br><span class="line">; Hack flag: <span class="number">00000000.00400000</span></span><br><span class="line">; Set a hack flag <span class="keyword">to</span> ignore subsystem vendor/device ids.</span><br><span class="line">; Hack flag: <span class="number">00000200.00000000</span></span><br><span class="line">; Set a hack flag <span class="keyword">to</span> enable MSI mapping <span class="keyword">on</span> memory host controllers.</span><br><span class="line">C:\Users\lethal\Desktop\flag (<span class="number">2</span>).rar</span><br><span class="line">flag.txt0</span><br><span class="line">flag.txt.lnk</span><br><span class="line">flag.zip.lnk</span><br><span class="line">flag (<span class="number">2</span>).rar.lnk</span><br><span class="line">flag.rar.lnk</span><br><span class="line">flag (<span class="number">2</span>).rar.lnk</span><br><span class="line">flag.zip</span><br><span class="line">flag.rar</span><br><span class="line">The Handle property represents a handle <span class="keyword">to</span> a thread. The handle has full access rights by default. With the correct security access, the handle can be used in any function that accepts a thread handle. Depending <span class="keyword">on</span> the inheritance flag specified when it is created, this handle can be inherited by child processes.</span><br><span class="line">flag.rar</span><br><span class="line">flag.zip</span><br><span class="line">flag.txt</span><br><span class="line">L:\flag.txt</span><br></pre></td></tr></table></figure>

<p>然后i利用filescan插件查找一下有关flag的文件。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">➜  RoarCTF volatility -f mem.raw --profile=Win7SP0x86 filescan | grep -E <span class="comment">&#x27;flag.zip|flag.rar|flag.txt&#x27;</span></span><br><span class="line">Volatility Foundation Volatility Framework <span class="number">2.6</span></span><br></pre></td></tr></table></figure>

<p>然后并没有找到，可能是已经被删除了</p>
<p><a href="https://www.baidu.com/s?wd=NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS文件系统</a>是微软自Windows NT系统后引入的全新的文件系统。在<a href="https://www.baidu.com/s?wd=NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS文件系统</a>里，磁盘上的所有东西都以文件的形式保存在<a href="https://www.baidu.com/s?wd=NTFS%E5%88%86%E5%8C%BA&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS分区</a>内，包括文件系统自身的结构和记录也是如此。NTFS中，卷中所有存放的数据均在一个叫$MFT的文件中，叫主文件表(Master File Table)，在MFT中保存了<a href="https://www.baidu.com/s?wd=NTFS%E5%88%86%E5%8C%BA&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">NTFS分区</a>上所有文件的索引，<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">操作系统</a>根据这个索引来检索问价。在使用mftparser插件时发现了flag.zip 和 flag.rar</p>
<p><code>volatility -f mem.raw --profile=Win7SP1x86 mftparser &gt; mft.txt</code></p>
<p>内容很多，随查找了一下flag关键字。</p>
<p><img src="http://pic.rayi.sdpcsec.cn/006y8mN6ly1g7xxiekk7jj313w08w0sr.jpg"></p>
<p>继续查找flag关键字，找到了flag.zip 和 flag.rar 的十六进制 dump 下来</p>
<p><img src="http://pic.rayi.sdpcsec.cn/006y8mN6ly1g7xxiz3jjuj30vp0htdh3.jpg"></p>
<p>在压缩包里发现了flag.txt，接下来思路是找到 压缩包的密码</p>
<p>首先简单看了下图片。</p>
<p><code>volatility -f mem.raw --profile=Win7SP1x86 filescan | grep -E &quot;png|jpg|jpeg&quot;</code></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">➜  RoarCTF volatility -f mem.raw --profile=Win7SP0x86 filescan | grep -E <span class="comment">&#x27;png|jpg|jpeg&#x27;              </span></span><br><span class="line">Volatility Foundation Volatility Framework <span class="number">2.6</span></span><br><span class="line"><span class="number">0</span>x000000001e1a79b8      <span class="number">8</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\Misc_24_af08942[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001e25b7d8      <span class="number">3</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Windows\System32\pngfilt.dll</span><br><span class="line"><span class="number">0</span>x000000001ec601b8      <span class="number">2</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\timer_8dee5c8[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001efb29f8      <span class="number">8</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Users\lethal\Pictures\无标题.png</span><br><span class="line"><span class="number">0</span>x000000001fc87838      <span class="number">8</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\<span class="number">8</span>C65LHWR\youqianhua71090-<span class="number">20190901</span>[<span class="number">1</span>].jpg</span><br><span class="line"><span class="number">0</span>x000000001fc87f80      <span class="number">8</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\vip-icon-all_7d887d5[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fc90ad0      <span class="number">2</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\<span class="number">4</span>U3T3ZUT\netdisk.<span class="number">1</span>.b66dd99a.fWIQlbKsyaUNxqaq1TY6xg[<span class="number">1</span>].jpg</span><br><span class="line"><span class="number">0</span>x000000001fc96b00      <span class="number">8</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Content.IE5\<span class="number">1</span>C24IFJ8\favicon[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fc9ce48      <span class="number">8</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\share_tit_bg_5855301[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcbf038      <span class="number">2</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\tip-close_f52b979[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcbfcb0      <span class="number">2</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\<span class="number">8</span>C65LHWR\tips_ffb87d4[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcd8630      <span class="number">8</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\ini_logo_ad77277[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcd8d90      <span class="number">2</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\<span class="number">4</span>U3T3ZUT\p-vip-icon-all_be8d2cb[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcdb2b0      <span class="number">8</span>      <span class="number">0</span> R--r-d \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\footer-cloud_0e0a657[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcdbd88      <span class="number">8</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\<span class="number">4</span>U3T3ZUT\Misc_54_f86ddc2[<span class="number">1</span>].png</span><br><span class="line"><span class="number">0</span>x000000001fcfd218      <span class="number">8</span>      <span class="number">0</span> -W-rwd \Device\HarddiskVolume2\Users\lethal\AppData\Local\Microsoft\Windows\Temporary Internet <span class="keyword">Files</span>\Low\Content.IE5\W9N0PGR5\updata-bg_2be0559[<span class="number">1</span>].png</span><br></pre></td></tr></table></figure>

<p>filesacn发现在我的文档，图片，文件夹里，有张图片 ，dumpfiles 下来就是flag.zip 的密码，成功拿到flag</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">-Q参数使用物理偏移量进行转储</span><br><span class="line">-n以文件名保存</span><br><span class="line">--dump-dir=目标存储位置</span><br><span class="line">➜  RoarCTF volatility -f mem.raw --profile=Win7SP0x86 dumpfiles -Q <span class="number">0</span>x000000001efb29f8 -n --dump-dir=./</span><br><span class="line">Volatility Foundation Volatility Framework <span class="number">2.6</span></span><br><span class="line">DataSectionObject <span class="number">0</span>x1efb29f8   None   \Device\HarddiskVolume2\Users\lethal\Pictures\无标题.png</span><br></pre></td></tr></table></figure>

<p><img src="http://pic.rayi.sdpcsec.cn/006y8mN6ly1g7xx6k8uvej30n106m3yb.jpg"></p>
<h4 id="VN2020-公开赛-内存取证"><a href="#VN2020-公开赛-内存取证" class="headerlink" title="[VN2020 公开赛]内存取证"></a>[VN2020 公开赛]内存取证</h4><p>先使用volatility2</p>
<p>查看内存平台版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">λ python2 D:\RayiTools\取证工具\volatility2\vol.py -f .\mem.raw imageinfo</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class="line">          Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86</span><br><span class="line">                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)</span><br><span class="line">                     AS Layer2 : FileAddressSpace (C:\Users\Rayi\Desktop\2020VNCTF\mem.raw)</span><br><span class="line">                      PAE <span class="built_in">type</span> : PAE</span><br><span class="line">                           DTB : 0x185000L</span><br><span class="line">                          KDBG : 0x8176bbe8L</span><br><span class="line">          Number of Processors : 2</span><br><span class="line">     Image Type (Service Pack) : 0</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU 0 : 0x8176cc00L</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU 1 : 0x807ec000L</span><br><span class="line">             KUSER_SHARED_DATA : 0xffdf0000L</span><br><span class="line">           Image <span class="built_in">date</span> and time : 2020-02-18 19:56:24 UTC+0000</span><br><span class="line">     Image <span class="built_in">local</span> <span class="built_in">date</span> and time : 2020-02-19 03:56:24 +0800</span><br></pre></td></tr></table></figure>

<p>查看当前进程</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python2 D:\RayiTools\取证工具\volatility2\<span class="built_in">vol</span>.py -f .\mem.raw --profile=Win7SP1x86 pstree</span><br></pre></td></tr></table></figure>

<p><strong>pslist</strong>命令不仅显示了所有正在运行的进程，而且给出了有价值的信息，比如PID、PPID、启动的时间。</p>
<p><strong>pstree</strong>与pslist命令不同的地方在于还可以识别子进程以及父进程</p>
<p><strong>psscan</strong>命令可以显示出被恶意软件比如rootkit为了躲避用户或杀毒软件而隐藏的进程</p>
<p><code>pslist</code></p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508215807909.png" alt="image-20210508215807909"></p>
<p><code>pstree</code></p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508215825071.png" alt="image-20210508215825071"></p>
<p><code>psscan</code></p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508215935157.png" alt="image-20210508215935157"></p>
<p>其中有几个值得注意的进程</p>
<ul>
<li><code>mspaint.exe</code> 微软画图工具</li>
<li><code>notepad.exe</code> 记事本</li>
<li><code>TrueCrypt.exe</code> 加密容器</li>
</ul>
<p>要导出记事本的内容，可以现将记事本dump出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 D:\RayiTools\取证工具\volatility2\vol.py -f .\mem.raw --profile=Win7SP1x86 memdump -o 0x000000001f1f5d40 --dump-dir ./</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># OR</span></span><br><span class="line"> </span><br><span class="line"> python2 D:\RayiTools\取证工具\volatility2\vol.py -f .\mem.raw --profile=Win7SP1x86 memdump -p 3552 --dump-dir ./</span><br></pre></td></tr></table></figure>

<p>然后用strings命令导出notepad中的字符串</p>
<p>在一大串字符串中可以找到这些东西</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508220816509.png" alt="image-20210508220816509"></p>
<p>这里有个更简单的办法，直接用<code>editbox</code>插件，即可看到系统中所有编辑控件中的编辑内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ volatility2 -f ./mem.raw --profile=Win7SP1x86 editbox</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">******************************</span><br><span class="line">Wnd Context       : 1\WinSta0\Default</span><br><span class="line">Process ID        : 3640</span><br><span class="line">ImageFileName     : iexplore.exe</span><br><span class="line">IsWow64           : No</span><br><span class="line">atom_class        : 6.0.7600.16385!Edit</span><br><span class="line">value-of WndExtra : 0x4a13b8</span><br><span class="line">nChars            : 0</span><br><span class="line">selStart          : 0</span><br><span class="line">selEnd            : 0</span><br><span class="line">isPwdControl      : False</span><br><span class="line">undoPos           : 0</span><br><span class="line">undoLen           : 0</span><br><span class="line">address-of undoBuf: 0x0</span><br><span class="line">undoBuf           :</span><br><span class="line">-------------------------</span><br><span class="line"></span><br><span class="line">******************************</span><br><span class="line">Wnd Context       : 1\WinSta0\Default</span><br><span class="line">Process ID        : 3640</span><br><span class="line">ImageFileName     : iexplore.exe</span><br><span class="line">IsWow64           : No</span><br><span class="line">atom_class        : 6.0.7600.16385!Edit</span><br><span class="line">value-of WndExtra : 0x49f3d0</span><br><span class="line">nChars            : 60</span><br><span class="line">selStart          : 0</span><br><span class="line">selEnd            : 0</span><br><span class="line">isPwdControl      : False</span><br><span class="line">undoPos           : 0</span><br><span class="line">undoLen           : 0</span><br><span class="line">address-of undoBuf: 0x0</span><br><span class="line">undoBuf           :</span><br><span class="line">-------------------------</span><br><span class="line">https://pan.baidu.com/share/init?surl=jAVwrRzIgW1QsLHidtzY_w</span><br><span class="line">******************************</span><br><span class="line">Wnd Context       : 1\WinSta0\Default</span><br><span class="line">Process ID        : 3552</span><br><span class="line">ImageFileName     : notepad.exe</span><br><span class="line">IsWow64           : No</span><br><span class="line">atom_class        : 6.0.7600.16385!Edit</span><br><span class="line">value-of WndExtra : 0x177ad0</span><br><span class="line">nChars            : 78</span><br><span class="line">selStart          : 0</span><br><span class="line">selEnd            : 0</span><br><span class="line">isPwdControl      : False</span><br><span class="line">undoPos           : 0</span><br><span class="line">undoLen           : 0</span><br><span class="line">address-of undoBuf: 0x0</span><br><span class="line">undoBuf           :</span><br><span class="line">-------------------------</span><br><span class="line"><span class="built_in">where</span> is <span class="built_in">link</span>?链接: https://pan.baidu.com/s/ 提取码: heem 复制这段内容后打开百度网盘手机App，操作更方便哦</span><br></pre></td></tr></table></figure>

<p>两个提取码和提取链接都找到了</p>
<p>网盘里存的是VOL加密容器，下一步就是找<code>truecrypt</code>加密容器的解密办法</p>
<p>利用工具<code>Elcomsoft Forensic Disk Decryptor</code></p>
<p>先dump出内存中的<code>TrueCrypt.exe</code></p>
<p>然后打开工具</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508223229230.png" alt="image-20210508223229230"></p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508223259008.png" alt="image-20210508223259008"></p>
<p>这样就有密钥了</p>
<p>一直下一步，挂载容器</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508223332781.png" alt="image-20210508223332781"></p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508223406645.png" alt="image-20210508223406645"></p>
<p>打开里面有个key文件，内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uOjFdKu1jsbWI8N51jsbWI8N5</span><br></pre></td></tr></table></figure>

<p>再用这个key去挂载容器</p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508223619449.png" alt="image-20210508223619449"></p>
<p><img src="http://pic.rayi.sdpcsec.cn/image-20210508223714514.png" alt="image-20210508223714514"></p>
]]></content>
      <categories>
        <category>内存取证</category>
      </categories>
  </entry>
  <entry>
    <title>关于</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h3 id="这个站点"><a href="#这个站点" class="headerlink" title="这个站点"></a>这个站点</h3><p>白嫖怪专属，Github+加速乐</p>
<h3 id="我"><a href="#我" class="headerlink" title="我"></a>我</h3><ul>
<li>CTFer</li>
<li>web菜狗</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index-1.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>friends</title>
    <url>/friends/index.html</url>
    <content><![CDATA[<div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">这些大佬请带带我</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://www.tianchenyi.com/" title="小琲的天尘翼" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://www.tianchenyi.com/picture/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="小琲的天尘翼" />
              </div>
              <div class="flink-item-name">小琲的天尘翼</div> 
              <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.cnblogs.com/pumpkin9/" title="pumpkin9" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="pumpkin9" />
              </div>
              <div class="flink-item-name">pumpkin9</div> 
              <div class="flink-item-desc" title="pwn师傅tql">pwn师傅tql</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="http://www.yukinoo.site" title="yukinoo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://www.yukinoo.site/upload/2021/10/preview-2155a3b187874466a47de4fc088414c4.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="yukinoo" />
              </div>
              <div class="flink-item-name">yukinoo</div> 
              <div class="flink-item-desc" title="摸鱼之王">摸鱼之王</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://whoamianony.top/" title="WHOAMI" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://whoamianony.top/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="WHOAMI" />
              </div>
              <div class="flink-item-name">WHOAMI</div> 
              <div class="flink-item-desc" title="WHOAMI师傅yyds">WHOAMI师傅yyds</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="http://w4nder.top/" title="w4nder" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://gitee.com/w4nder/imgs/raw/master/1571753777463409.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="w4nder" />
              </div>
              <div class="flink-item-name">w4nder</div> 
              <div class="flink-item-desc" title="w4师傅ddw">w4师傅ddw</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.yuque.com/th31nk/" title="th31nk" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://cdn.nlark.com/yuque/0/2021/jpeg/anonymous/1611985574086-a7aee59f-1269-451e-8177-5877ef130116.jpeg?x-oss-process=image%2Fresize%2Cm_fill%2Cw_320%2Ch_320%2Fformat%2Cpng" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="th31nk" />
              </div>
              <div class="flink-item-name">th31nk</div> 
              <div class="flink-item-desc" title="全栈的神">全栈的神</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.cnblogs.com/MisakaYuii-Z/" title="MisakaYu11" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="MisakaYu11" />
              </div>
              <div class="flink-item-name">MisakaYu11</div> 
              <div class="flink-item-desc" title="MisakaYu11">MisakaYu11</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="http://oriole.fun/" title="oriole" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="oriole" />
              </div>
              <div class="flink-item-name">oriole</div> 
              <div class="flink-item-desc" title="两只黄鹂鸣翠柳">两只黄鹂鸣翠柳</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="http://www.whrizyl819.xyz/" title="sp4c1ous" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://b3logfile.com/siyuan/1621238442570/assets/1024px-Vincent_van_Gogh_-_Almond_blossom_-_Google_Art_Project-20220305222307-ex7eayk.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="sp4c1ous" />
              </div>
              <div class="flink-item-name">sp4c1ous</div> 
              <div class="flink-item-desc" title="sp4c1ous">sp4c1ous</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="http://www.andynoel.xyz" title="andynoel" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://www.andynoel.xyz/wp-content/uploads/2022/02/IMG_648220220206-180239.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="andynoel" />
              </div>
              <div class="flink-item-name">andynoel</div> 
              <div class="flink-item-desc" title="andynoel">andynoel</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="http://mon0dy.top/" title="mon0dy" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="http://mon0dy.top/img/head.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="mon0dy" />
              </div>
              <div class="flink-item-name">mon0dy</div> 
              <div class="flink-item-desc" title="mon0dy">mon0dy</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://bigpowercat.github.io/" title="大能猫" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="大能猫" />
              </div>
              <div class="flink-item-name">大能猫</div> 
              <div class="flink-item-desc" title="大能猫_多能">大能猫_多能</div>
            </a>
          </div></div></div>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/source/lib/canvas-nest/README.html</url>
    <content><![CDATA[<h1 align="center"><a href="https://github.com/hustcc/canvas-nest.js">canvas-nest.js</a> for <a href="https://github.com/theme-next">NexT</a></h1>

<h1 align="center">Installation</h1>

<h2 align="center">Step 1 &rarr; Go to NexT dir</h2>

<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class="built_in">source</span>  <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 align="center">Step 2 &rarr; Get module</h2>

<p>Install module to <code>source/lib</code> directory:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<h2 align="center">Step 3 &rarr; Set it up</h2>

<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure>

<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">canvas_nest:</span> <span class="string">//fastly.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js</span></span><br><span class="line">  <span class="attr">canvas_nest_nomobile:</span> <span class="string">//fastly.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js</span></span><br></pre></td></tr></table></figure>

<h1 align="center">Update</h1>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next/source/lib/canvas-nest</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/source/lib/canvas-nest/canvas-nest-nomobile.min.js</url>
    <content><![CDATA[!function(){
	var userAgentInfo = navigator.userAgent;
    var Agents = ["iPad", "iPhone", "Android", 
          "SymbianOS", "Windows Phone",
           "iPod", "webOS", "BlackBerry", "IEMobile"];
    for (var v = 0; v < Agents.length; v++) {
      if (userAgentInfo.indexOf(Agents[v]) > 0) {
        return;
      }
    }
	function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lib/source/lib/canvas-nest/canvas-nest.min.js</url>
    <content><![CDATA[!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();]]></content>
  </entry>
</search>
